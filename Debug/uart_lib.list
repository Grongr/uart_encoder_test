
uart_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f74  08005f74  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f7c  08005f7c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005f84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000890  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000908  20000908  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a6c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240b  00000000  00000000  00031b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00033f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c50  00000000  00000000  00034c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f15  00000000  00000000  00035898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f89d  00000000  00000000  0005b7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7551  00000000  00000000  0006b04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015259b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c78  00000000  00000000  001525ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005d3c 	.word	0x08005d3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08005d3c 	.word	0x08005d3c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <transmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void transmit(UART_HandleTypeDef* huart, const char* str) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str),
 8000dba:	6838      	ldr	r0, [r7, #0]
 8000dbc:	f7ff fa22 	bl	8000204 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f002 ffe9 	bl	8003da2 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <clean_buffer>:

static void clean_buffer(char* buffer) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < MAX_MSG_LENGTH; ++i)
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e007      	b.n	8000df6 <clean_buffer+0x1e>
		buffer[i] = '\0';
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_MSG_LENGTH; ++i)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b31      	cmp	r3, #49	; 0x31
 8000dfa:	ddf4      	ble.n	8000de6 <clean_buffer+0xe>
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <request_processing>:

void request_processing(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af02      	add	r7, sp, #8

	sprintf(message, "Azimuth: %.3lg Elevation: %.3lg\r\n",
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <request_processing+0x38>)
 8000e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <request_processing+0x3c>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4909      	ldr	r1, [pc, #36]	; (8000e4c <request_processing+0x40>)
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <request_processing+0x44>)
 8000e2a:	f004 fb19 	bl	8005460 <siprintf>
			actual_azimuth, actual_elevation);

	transmit(&huart8, message);
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <request_processing+0x44>)
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <request_processing+0x48>)
 8000e32:	f7ff ffbd 	bl	8000db0 <transmit>
	clean_buffer(message);
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <request_processing+0x44>)
 8000e38:	f7ff ffce 	bl	8000dd8 <clean_buffer>
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200008d0 	.word	0x200008d0
 8000e48:	200008d8 	.word	0x200008d8
 8000e4c:	08005d54 	.word	0x08005d54
 8000e50:	20000898 	.word	0x20000898
 8000e54:	20000304 	.word	0x20000304

08000e58 <HAL_UART_RxCpltCallback>:

#ifndef UART_TEST
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	if (huart == &huart8) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <HAL_UART_RxCpltCallback+0x90>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d13b      	bne.n	8000ee0 <HAL_UART_RxCpltCallback+0x88>

		switch (read_command(message)) {
 8000e68:	4820      	ldr	r0, [pc, #128]	; (8000eec <HAL_UART_RxCpltCallback+0x94>)
 8000e6a:	f000 fe3b 	bl	8001ae4 <read_command>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	3301      	adds	r3, #1
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d827      	bhi.n	8000ec6 <HAL_UART_RxCpltCallback+0x6e>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <HAL_UART_RxCpltCallback+0x24>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000ebd 	.word	0x08000ebd
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000e9f 	.word	0x08000e9f
 8000e88:	08000ea9 	.word	0x08000ea9
 8000e8c:	08000eb3 	.word	0x08000eb3
		case Request:
			transmit(&huart8, "Request command received!\r\n");
 8000e90:	4917      	ldr	r1, [pc, #92]	; (8000ef0 <HAL_UART_RxCpltCallback+0x98>)
 8000e92:	4815      	ldr	r0, [pc, #84]	; (8000ee8 <HAL_UART_RxCpltCallback+0x90>)
 8000e94:	f7ff ff8c 	bl	8000db0 <transmit>
			request_processing();
 8000e98:	f7ff ffb8 	bl	8000e0c <request_processing>
			break;
 8000e9c:	e018      	b.n	8000ed0 <HAL_UART_RxCpltCallback+0x78>

		case SetZero:
			transmit(&huart8, "Set zero command received!\r\n");
 8000e9e:	4915      	ldr	r1, [pc, #84]	; (8000ef4 <HAL_UART_RxCpltCallback+0x9c>)
 8000ea0:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <HAL_UART_RxCpltCallback+0x90>)
 8000ea2:	f7ff ff85 	bl	8000db0 <transmit>
			break;
 8000ea6:	e013      	b.n	8000ed0 <HAL_UART_RxCpltCallback+0x78>

		case SetElev:
			transmit(&huart8, "Set Elevation command received\r\n");
 8000ea8:	4913      	ldr	r1, [pc, #76]	; (8000ef8 <HAL_UART_RxCpltCallback+0xa0>)
 8000eaa:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <HAL_UART_RxCpltCallback+0x90>)
 8000eac:	f7ff ff80 	bl	8000db0 <transmit>
			break;
 8000eb0:	e00e      	b.n	8000ed0 <HAL_UART_RxCpltCallback+0x78>

		case SetAzim:
			transmit(&huart8, "Set Azimuth command received!\r\n");
 8000eb2:	4912      	ldr	r1, [pc, #72]	; (8000efc <HAL_UART_RxCpltCallback+0xa4>)
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <HAL_UART_RxCpltCallback+0x90>)
 8000eb6:	f7ff ff7b 	bl	8000db0 <transmit>
			break;
 8000eba:	e009      	b.n	8000ed0 <HAL_UART_RxCpltCallback+0x78>

		case CMError:
			transmit(&huart8, "Command error!\r\n");
 8000ebc:	4910      	ldr	r1, [pc, #64]	; (8000f00 <HAL_UART_RxCpltCallback+0xa8>)
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <HAL_UART_RxCpltCallback+0x90>)
 8000ec0:	f7ff ff76 	bl	8000db0 <transmit>

			break;
 8000ec4:	e004      	b.n	8000ed0 <HAL_UART_RxCpltCallback+0x78>

		default:
			transmit(&huart8, "Command not found!\r\n");
 8000ec6:	490f      	ldr	r1, [pc, #60]	; (8000f04 <HAL_UART_RxCpltCallback+0xac>)
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <HAL_UART_RxCpltCallback+0x90>)
 8000eca:	f7ff ff71 	bl	8000db0 <transmit>

			break;
 8000ece:	bf00      	nop
		}

		clean_buffer(message);
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <HAL_UART_RxCpltCallback+0x94>)
 8000ed2:	f7ff ff81 	bl	8000dd8 <clean_buffer>
		HAL_UART_Receive_IT(&huart8, (uint8_t*)message, COMMAND_LENGTH);
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	4904      	ldr	r1, [pc, #16]	; (8000eec <HAL_UART_RxCpltCallback+0x94>)
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <HAL_UART_RxCpltCallback+0x90>)
 8000edc:	f002 fff3 	bl	8003ec6 <HAL_UART_Receive_IT>
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000304 	.word	0x20000304
 8000eec:	20000898 	.word	0x20000898
 8000ef0:	08005d78 	.word	0x08005d78
 8000ef4:	08005d94 	.word	0x08005d94
 8000ef8:	08005db4 	.word	0x08005db4
 8000efc:	08005dd8 	.word	0x08005dd8
 8000f00:	08005df8 	.word	0x08005df8
 8000f04:	08005e0c 	.word	0x08005e0c

08000f08 <calibration>:

double adc_val = 0;

double calibr_coef = 360.0 / 4095 * 10;

void calibration(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0

	uint minv = 5000, maxv = 0;
 8000f0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]

	transmit(&huart8, "Calibration started!\r\n");
 8000f18:	4927      	ldr	r1, [pc, #156]	; (8000fb8 <calibration+0xb0>)
 8000f1a:	4828      	ldr	r0, [pc, #160]	; (8000fbc <calibration+0xb4>)
 8000f1c:	f7ff ff48 	bl	8000db0 <transmit>

	for (int i = 0; i < 1000; ++i) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e024      	b.n	8000f70 <calibration+0x68>

		HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f000 fea8 	bl	8001c7c <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000f2c:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <calibration+0xb8>)
 8000f2e:	f000 ff0d 	bl	8001d4c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8000f32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f36:	4822      	ldr	r0, [pc, #136]	; (8000fc0 <calibration+0xb8>)
 8000f38:	f000 ffda 	bl	8001ef0 <HAL_ADC_PollForConversion>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <calibration+0x42>
			transmit(&huart8, "ADC Error!\r\n");
 8000f42:	4920      	ldr	r1, [pc, #128]	; (8000fc4 <calibration+0xbc>)
 8000f44:	481d      	ldr	r0, [pc, #116]	; (8000fbc <calibration+0xb4>)
 8000f46:	f7ff ff33 	bl	8000db0 <transmit>

		uint tmp = (uint)HAL_ADC_GetValue(&hadc1);
 8000f4a:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <calibration+0xb8>)
 8000f4c:	f001 f85b 	bl	8002006 <HAL_ADC_GetValue>
 8000f50:	6038      	str	r0, [r7, #0]

		maxv = (tmp > maxv) ? tmp : maxv;
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	4293      	cmp	r3, r2
 8000f58:	bf38      	it	cc
 8000f5a:	4613      	movcc	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
		minv = (tmp < minv) ? tmp : minv;
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	4293      	cmp	r3, r2
 8000f64:	bf28      	it	cs
 8000f66:	4613      	movcs	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1000; ++i) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f76:	dbd6      	blt.n	8000f26 <calibration+0x1e>
	}

	calibr_coef = 360.0 / (double)(maxv - minv) * 10;
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fae0 	bl	8000544 <__aeabi_ui2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	f04f 0000 	mov.w	r0, #0
 8000f8c:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <calibration+0xc0>)
 8000f8e:	f7ff fc7d 	bl	800088c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <calibration+0xc4>)
 8000fa0:	f7ff fb4a 	bl	8000638 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4909      	ldr	r1, [pc, #36]	; (8000fd0 <calibration+0xc8>)
 8000faa:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08005e24 	.word	0x08005e24
 8000fbc:	20000304 	.word	0x20000304
 8000fc0:	2000020c 	.word	0x2000020c
 8000fc4:	08005e3c 	.word	0x08005e3c
 8000fc8:	40768000 	.word	0x40768000
 8000fcc:	40240000 	.word	0x40240000
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f000 fdde 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f862 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 f9ec 	bl	80013bc <MX_GPIO_Init>
  MX_ETH_Init();
 8000fe4:	f000 f91a 	bl	800121c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fe8:	f000 f990 	bl	800130c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fec:	f000 f9b8 	bl	8001360 <MX_USB_OTG_FS_PCD_Init>
  MX_UART8_Init();
 8000ff0:	f000 f962 	bl	80012b8 <MX_UART8_Init>
  MX_ADC1_Init();
 8000ff4:	f000 f8c0 	bl	8001178 <MX_ADC1_Init>
/*#ifndef UART_TEST
  HAL_UART_Receive_IT(&huart8, (uint8_t*)message, COMMAND_LENGTH);
#endif*/

  //HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	f000 fe3f 	bl	8001c7c <HAL_Delay>

  uart_init(&huart8);
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <main+0xb8>)
 8001000:	f000 fd2c 	bl	8001a5c <uart_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  calibration();
 8001004:	f7ff ff80 	bl	8000f08 <calibration>
  while (1)
  {
	HAL_Delay(500);
 8001008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100c:	f000 fe36 	bl	8001c7c <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8001010:	481f      	ldr	r0, [pc, #124]	; (8001090 <main+0xbc>)
 8001012:	f000 fe9b 	bl	8001d4c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8001016:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800101a:	481d      	ldr	r0, [pc, #116]	; (8001090 <main+0xbc>)
 800101c:	f000 ff68 	bl	8001ef0 <HAL_ADC_PollForConversion>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <main+0x58>
		return -1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102a:	e02d      	b.n	8001088 <main+0xb4>

	adc_val = (double)HAL_ADC_GetValue(&hadc1);
 800102c:	4818      	ldr	r0, [pc, #96]	; (8001090 <main+0xbc>)
 800102e:	f000 ffea 	bl	8002006 <HAL_ADC_GetValue>
 8001032:	4603      	mov	r3, r0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa85 	bl	8000544 <__aeabi_ui2d>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4915      	ldr	r1, [pc, #84]	; (8001094 <main+0xc0>)
 8001040:	e9c1 2300 	strd	r2, r3, [r1]

	adc_val *= calibr_coef;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <main+0xc0>)
 8001046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <main+0xc4>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff faf2 	bl	8000638 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	490e      	ldr	r1, [pc, #56]	; (8001094 <main+0xc0>)
 800105a:	e9c1 2300 	strd	r2, r3, [r1]

	sprintf(message, "ADC in deg: %d\r\n", (int)adc_val);
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <main+0xc0>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fcf8 	bl	8000a5c <__aeabi_d2iz>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	490a      	ldr	r1, [pc, #40]	; (800109c <main+0xc8>)
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <main+0xcc>)
 8001074:	f004 f9f4 	bl	8005460 <siprintf>
	transmit(&huart8, message);
 8001078:	4909      	ldr	r1, [pc, #36]	; (80010a0 <main+0xcc>)
 800107a:	4804      	ldr	r0, [pc, #16]	; (800108c <main+0xb8>)
 800107c:	f7ff fe98 	bl	8000db0 <transmit>
	clean_buffer(message);
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <main+0xcc>)
 8001082:	f7ff fea9 	bl	8000dd8 <clean_buffer>
	HAL_Delay(500);
 8001086:	e7bf      	b.n	8001008 <main+0x34>
#ifdef UART_TEST
	uart_test(&huart8);
#endif
  }
  /* USER CODE END 3 */
}
 8001088:	4618      	mov	r0, r3
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000304 	.word	0x20000304
 8001090:	2000020c 	.word	0x2000020c
 8001094:	200008e0 	.word	0x200008e0
 8001098:	20000000 	.word	0x20000000
 800109c:	08005e4c 	.word	0x08005e4c
 80010a0:	20000898 	.word	0x20000898

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 f9cc 	bl	8005450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <SystemClock_Config+0xcc>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <SystemClock_Config+0xcc>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <SystemClock_Config+0xd0>)
 80010ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <SystemClock_Config+0xd0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001104:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001118:	23a8      	movs	r3, #168	; 0xa8
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001120:	2307      	movs	r3, #7
 8001122:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f955 	bl	80033d8 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001134:	f000 f9fe 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2302      	movs	r3, #2
 800113e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001144:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2105      	movs	r1, #5
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fbb6 	bl	80038c8 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001162:	f000 f9e7 	bl	8001534 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	; 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_ADC1_Init+0x98>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <MX_ADC1_Init+0x9c>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_ADC1_Init+0x98>)
 8001192:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_ADC1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <MX_ADC1_Init+0xa0>)
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_ADC1_Init+0x98>)
 80011da:	f000 fd73 	bl	8001cc4 <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011e4:	f000 f9a6 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_ADC1_Init+0x98>)
 80011fa:	f000 ff11 	bl	8002020 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001204:	f000 f996 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000020c 	.word	0x2000020c
 8001214:	40012000 	.word	0x40012000
 8001218:	0f000001 	.word	0x0f000001

0800121c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_ETH_Init+0x84>)
 8001222:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <MX_ETH_Init+0x88>)
 8001224:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_ETH_Init+0x8c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_ETH_Init+0x8c>)
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_ETH_Init+0x8c>)
 8001234:	22e1      	movs	r2, #225	; 0xe1
 8001236:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_ETH_Init+0x8c>)
 800123a:	2200      	movs	r2, #0
 800123c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_ETH_Init+0x8c>)
 8001240:	2200      	movs	r2, #0
 8001242:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_ETH_Init+0x8c>)
 8001246:	2200      	movs	r2, #0
 8001248:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_ETH_Init+0x84>)
 800124c:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <MX_ETH_Init+0x8c>)
 800124e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_ETH_Init+0x84>)
 8001252:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001256:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_ETH_Init+0x84>)
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <MX_ETH_Init+0x90>)
 800125c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_ETH_Init+0x84>)
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <MX_ETH_Init+0x94>)
 8001262:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_ETH_Init+0x84>)
 8001266:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800126a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MX_ETH_Init+0x84>)
 800126e:	f001 faa9 	bl	80027c4 <HAL_ETH_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001278:	f000 f95c 	bl	8001534 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800127c:	2238      	movs	r2, #56	; 0x38
 800127e:	2100      	movs	r1, #0
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_ETH_Init+0x98>)
 8001282:	f004 f8e5 	bl	8005450 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_ETH_Init+0x98>)
 8001288:	2221      	movs	r2, #33	; 0x21
 800128a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_ETH_Init+0x98>)
 800128e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001292:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_ETH_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000254 	.word	0x20000254
 80012a4:	40028000 	.word	0x40028000
 80012a8:	200008e8 	.word	0x200008e8
 80012ac:	2000016c 	.word	0x2000016c
 80012b0:	200000cc 	.word	0x200000cc
 80012b4:	20000094 	.word	0x20000094

080012b8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_UART8_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_UART8_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_UART8_Init+0x4c>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_UART8_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_UART8_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_UART8_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_UART8_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_UART8_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_UART8_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_UART8_Init+0x4c>)
 80012f0:	f002 fd0a 	bl	8003d08 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80012fa:	f000 f91b 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000304 	.word	0x20000304
 8001308:	40007c00 	.word	0x40007c00

0800130c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART3_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001344:	f002 fce0 	bl	8003d08 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f000 f8f1 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000348 	.word	0x20000348
 800135c:	40004800 	.word	0x40004800

08001360 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800136a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136e:	2204      	movs	r2, #4
 8001370:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001374:	2202      	movs	r2, #2
 8001376:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001380:	2202      	movs	r2, #2
 8001382:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001386:	2201      	movs	r2, #1
 8001388:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001398:	2201      	movs	r2, #1
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a4:	f001 fefb 	bl	800319e <HAL_PCD_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013ae:	f000 f8c1 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000038c 	.word	0x2000038c

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	4b53      	ldr	r3, [pc, #332]	; (8001524 <MX_GPIO_Init+0x168>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a52      	ldr	r2, [pc, #328]	; (8001524 <MX_GPIO_Init+0x168>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b50      	ldr	r3, [pc, #320]	; (8001524 <MX_GPIO_Init+0x168>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	4b4c      	ldr	r3, [pc, #304]	; (8001524 <MX_GPIO_Init+0x168>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <MX_GPIO_Init+0x168>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b49      	ldr	r3, [pc, #292]	; (8001524 <MX_GPIO_Init+0x168>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b45      	ldr	r3, [pc, #276]	; (8001524 <MX_GPIO_Init+0x168>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a44      	ldr	r2, [pc, #272]	; (8001524 <MX_GPIO_Init+0x168>)
 8001414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b42      	ldr	r3, [pc, #264]	; (8001524 <MX_GPIO_Init+0x168>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <MX_GPIO_Init+0x168>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <MX_GPIO_Init+0x168>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <MX_GPIO_Init+0x168>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <MX_GPIO_Init+0x168>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a36      	ldr	r2, [pc, #216]	; (8001524 <MX_GPIO_Init+0x168>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <MX_GPIO_Init+0x168>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <MX_GPIO_Init+0x168>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <MX_GPIO_Init+0x168>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_GPIO_Init+0x168>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_GPIO_Init+0x168>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <MX_GPIO_Init+0x168>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_GPIO_Init+0x168>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f244 0181 	movw	r1, #16513	; 0x4081
 800149c:	4822      	ldr	r0, [pc, #136]	; (8001528 <MX_GPIO_Init+0x16c>)
 800149e:	f001 fe65 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	4821      	ldr	r0, [pc, #132]	; (800152c <MX_GPIO_Init+0x170>)
 80014a8:	f001 fe60 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	481b      	ldr	r0, [pc, #108]	; (8001530 <MX_GPIO_Init+0x174>)
 80014c4:	f001 fca6 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_GPIO_Init+0x16c>)
 80014e2:	f001 fc97 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <MX_GPIO_Init+0x170>)
 80014fe:	f001 fc89 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_GPIO_Init+0x170>)
 8001516:	f001 fc7d 	bl	8002e14 <HAL_GPIO_Init>

}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	; 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40020400 	.word	0x40020400
 800152c:	40021800 	.word	0x40021800
 8001530:	40020800 	.word	0x40020800

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_MspInit+0x4c>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_MspInit+0x4c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_ADC_MspInit+0x7c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d127      	bne.n	8001602 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a15      	ldr	r2, [pc, #84]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_ADC_MspInit+0x80>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ea:	2301      	movs	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_ADC_MspInit+0x84>)
 80015fe:	f001 fc09 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012000 	.word	0x40012000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a55      	ldr	r2, [pc, #340]	; (800178c <HAL_ETH_MspInit+0x174>)
 8001636:	4293      	cmp	r3, r2
 8001638:	f040 80a4 	bne.w	8001784 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a52      	ldr	r2, [pc, #328]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a44      	ldr	r2, [pc, #272]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800167e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001682:	6313      	str	r3, [r2, #48]	; 0x30
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <HAL_ETH_MspInit+0x178>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <HAL_ETH_MspInit+0x178>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a36      	ldr	r2, [pc, #216]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a28      	ldr	r2, [pc, #160]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_ETH_MspInit+0x178>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001700:	2332      	movs	r3, #50	; 0x32
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001710:	230b      	movs	r3, #11
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	481e      	ldr	r0, [pc, #120]	; (8001794 <HAL_ETH_MspInit+0x17c>)
 800171c:	f001 fb7a 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001720:	2386      	movs	r3, #134	; 0x86
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001730:	230b      	movs	r3, #11
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4817      	ldr	r0, [pc, #92]	; (8001798 <HAL_ETH_MspInit+0x180>)
 800173c:	f001 fb6a 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001752:	230b      	movs	r3, #11
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	480f      	ldr	r0, [pc, #60]	; (800179c <HAL_ETH_MspInit+0x184>)
 800175e:	f001 fb59 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001762:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001774:	230b      	movs	r3, #11
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <HAL_ETH_MspInit+0x188>)
 8001780:	f001 fb48 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3738      	adds	r7, #56	; 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40028000 	.word	0x40028000
 8001790:	40023800 	.word	0x40023800
 8001794:	40020800 	.word	0x40020800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40021800 	.word	0x40021800

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <HAL_UART_MspInit+0xf8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d134      	bne.n	8001830 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a34      	ldr	r2, [pc, #208]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 80017d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017fe:	2303      	movs	r3, #3
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800180e:	2308      	movs	r3, #8
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4822      	ldr	r0, [pc, #136]	; (80018a4 <HAL_UART_MspInit+0x100>)
 800181a:	f001 fafb 	bl	8002e14 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2053      	movs	r0, #83	; 0x53
 8001824:	f000 ff05 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001828:	2053      	movs	r0, #83	; 0x53
 800182a:	f000 ff1e 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800182e:	e031      	b.n	8001894 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <HAL_UART_MspInit+0x104>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12c      	bne.n	8001894 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_UART_MspInit+0xfc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001884:	2307      	movs	r3, #7
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	4807      	ldr	r0, [pc, #28]	; (80018ac <HAL_UART_MspInit+0x108>)
 8001890:	f001 fac0 	bl	8002e14 <HAL_GPIO_Init>
}
 8001894:	bf00      	nop
 8001896:	3730      	adds	r7, #48	; 0x30
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40007c00 	.word	0x40007c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40004800 	.word	0x40004800
 80018ac:	40020c00 	.word	0x40020c00

080018b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d0:	d13f      	bne.n	8001952 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_PCD_MspInit+0xac>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a20      	ldr	r2, [pc, #128]	; (800195c <HAL_PCD_MspInit+0xac>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_PCD_MspInit+0xac>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018ee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001900:	230a      	movs	r3, #10
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4815      	ldr	r0, [pc, #84]	; (8001960 <HAL_PCD_MspInit+0xb0>)
 800190c:	f001 fa82 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	480e      	ldr	r0, [pc, #56]	; (8001960 <HAL_PCD_MspInit+0xb0>)
 8001926:	f001 fa75 	bl	8002e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_PCD_MspInit+0xac>)
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_PCD_MspInit+0xac>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	6353      	str	r3, [r2, #52]	; 0x34
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_PCD_MspInit+0xac>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_PCD_MspInit+0xac>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_PCD_MspInit+0xac>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f944 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <UART8_IRQHandler+0x10>)
 80019be:	f002 fab3 	bl	8003f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000304 	.word	0x20000304

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f003 fcfe 	bl	80053fc <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20030000 	.word	0x20030000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	200008f0 	.word	0x200008f0
 8001a34:	20000908 	.word	0x20000908

08001a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <uart_init>:
#include "uart_protocol.h"

void uart_init(UART_HandleTypeDef* huart) {
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b092      	sub	sp, #72	; 0x48
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	const char hello_msg[] = "Program will start in five seconds :)\r\n";
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <uart_init+0x80>)
 8001a66:	f107 0420 	add.w	r4, r7, #32
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a78:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(huart, (uint8_t*)hello_msg,
			          strlen(hello_msg), HAL_MAX_DELAY);
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fbbf 	bl	8000204 <strlen>
 8001a86:	4603      	mov	r3, r0
	HAL_UART_Transmit(huart, (uint8_t*)hello_msg,
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	f107 0120 	add.w	r1, r7, #32
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f002 f985 	bl	8003da2 <HAL_UART_Transmit>
	HAL_Delay(5000);
 8001a98:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a9c:	f000 f8ee 	bl	8001c7c <HAL_Delay>

	const char start_msg[] = "Program started!\r\n";
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <uart_init+0x84>)
 8001aa2:	f107 040c 	add.w	r4, r7, #12
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	8022      	strh	r2, [r4, #0]
 8001ab2:	3402      	adds	r4, #2
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(huart, (uint8_t*)start_msg,
			          strlen(start_msg), HAL_MAX_DELAY);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fba1 	bl	8000204 <strlen>
 8001ac2:	4603      	mov	r3, r0
	HAL_UART_Transmit(huart, (uint8_t*)start_msg,
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	f107 010c 	add.w	r1, r7, #12
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f002 f967 	bl	8003da2 <HAL_UART_Transmit>
}
 8001ad4:	bf00      	nop
 8001ad6:	3748      	adds	r7, #72	; 0x48
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bdb0      	pop	{r4, r5, r7, pc}
 8001adc:	08005e60 	.word	0x08005e60
 8001ae0:	08005e88 	.word	0x08005e88

08001ae4 <read_command>:
	HAL_UART_Transmit(huart, (uint8_t*)msg,
			          strlen(msg), HAL_MAX_DELAY);
	HAL_Delay(100);
}

UARTCommands read_command(char* message) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

	message[7] = '\0';
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3307      	adds	r3, #7
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]

	if (message[0] == 'A')	return SetAzim;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b41      	cmp	r3, #65	; 0x41
 8001afa:	d101      	bne.n	8001b00 <read_command+0x1c>
 8001afc:	2303      	movs	r3, #3
 8001afe:	e019      	b.n	8001b34 <read_command+0x50>

	if (message[0] == 'E') return SetElev;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b45      	cmp	r3, #69	; 0x45
 8001b06:	d101      	bne.n	8001b0c <read_command+0x28>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e013      	b.n	8001b34 <read_command+0x50>

	if (!strcmp(message, "REQUEST")) return Request;
 8001b0c:	490b      	ldr	r1, [pc, #44]	; (8001b3c <read_command+0x58>)
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe fb6e 	bl	80001f0 <strcmp>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <read_command+0x3a>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e00a      	b.n	8001b34 <read_command+0x50>

	if (!strcmp(message, "SETZERO")) return SetZero;
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <read_command+0x5c>)
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe fb65 	bl	80001f0 <strcmp>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <read_command+0x4c>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e001      	b.n	8001b34 <read_command+0x50>

	return CMError;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	08005f18 	.word	0x08005f18
 8001b40:	08005f20 	.word	0x08005f20

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b4a:	490e      	ldr	r1, [pc, #56]	; (8001b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b60:	4c0b      	ldr	r4, [pc, #44]	; (8001b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6e:	f7ff ff63 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b72:	f003 fc49 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7ff fa2d 	bl	8000fd4 <main>
  bx  lr    
 8001b7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b88:	08005f84 	.word	0x08005f84
  ldr r2, =_sbss
 8001b8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b90:	20000908 	.word	0x20000908

08001b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_Init+0x40>)
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_Init+0x40>)
 8001bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_Init+0x40>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 fd2b 	bl	800261c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fcb8 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023c00 	.word	0x40023c00

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fd43 	bl	8002686 <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c18:	f000 fd0b 	bl	8002632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000010 	.word	0x20000010
 8001c38:	2000000c 	.word	0x2000000c

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000010 	.word	0x20000010
 8001c60:	200008f4 	.word	0x200008f4

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200008f4 	.word	0x200008f4

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000010 	.word	0x20000010

08001cc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e033      	b.n	8001d42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fc54 	bl	8001590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d118      	bne.n	8001d34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d0a:	f023 0302 	bic.w	r3, r3, #2
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fab4 	bl	8002284 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f023 0303 	bic.w	r3, r3, #3
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
 8001d32:	e001      	b.n	8001d38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Start+0x1a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e0b2      	b.n	8001ecc <HAL_ADC_Start+0x180>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d018      	beq.n	8001dae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d8c:	4b52      	ldr	r3, [pc, #328]	; (8001ed8 <HAL_ADC_Start+0x18c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_ADC_Start+0x190>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0c9a      	lsrs	r2, r3, #18
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f9      	bne.n	8001da2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d17a      	bne.n	8001eb2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001de6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfa:	d106      	bne.n	8001e0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	f023 0206 	bic.w	r2, r3, #6
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_ADC_Start+0x194>)
 8001e1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d12a      	bne.n	8001e88 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_ADC_Start+0x198>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d015      	beq.n	8001e68 <HAL_ADC_Start+0x11c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <HAL_ADC_Start+0x19c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d105      	bne.n	8001e52 <HAL_ADC_Start+0x106>
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_ADC_Start+0x194>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <HAL_ADC_Start+0x1a0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d136      	bne.n	8001eca <HAL_ADC_Start+0x17e>
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_ADC_Start+0x194>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d130      	bne.n	8001eca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d129      	bne.n	8001eca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	e020      	b.n	8001eca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_ADC_Start+0x198>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d11b      	bne.n	8001eca <HAL_ADC_Start+0x17e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d114      	bne.n	8001eca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e00b      	b.n	8001eca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f043 0210 	orr.w	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	40012300 	.word	0x40012300
 8001ee4:	40012000 	.word	0x40012000
 8001ee8:	40012100 	.word	0x40012100
 8001eec:	40012200 	.word	0x40012200

08001ef0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0c:	d113      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1c:	d10b      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f043 0220 	orr.w	r2, r3, #32
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e063      	b.n	8001ffe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f36:	f7ff fe95 	bl	8001c64 <HAL_GetTick>
 8001f3a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f3c:	e021      	b.n	8001f82 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f44:	d01d      	beq.n	8001f82 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_ADC_PollForConversion+0x6c>
 8001f4c:	f7ff fe8a 	bl	8001c64 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d212      	bcs.n	8001f82 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d00b      	beq.n	8001f82 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f043 0204 	orr.w	r2, r3, #4
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e03d      	b.n	8001ffe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d1d6      	bne.n	8001f3e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0212 	mvn.w	r2, #18
 8001f98:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d123      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11f      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d111      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1c>
 8002038:	2302      	movs	r3, #2
 800203a:	e113      	b.n	8002264 <HAL_ADC_ConfigChannel+0x244>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b09      	cmp	r3, #9
 800204a:	d925      	bls.n	8002098 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68d9      	ldr	r1, [r3, #12]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	3b1e      	subs	r3, #30
 8002062:	2207      	movs	r2, #7
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43da      	mvns	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	400a      	ands	r2, r1
 8002070:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68d9      	ldr	r1, [r3, #12]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4618      	mov	r0, r3
 8002084:	4603      	mov	r3, r0
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4403      	add	r3, r0
 800208a:	3b1e      	subs	r3, #30
 800208c:	409a      	lsls	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	e022      	b.n	80020de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6919      	ldr	r1, [r3, #16]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	2207      	movs	r2, #7
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	400a      	ands	r2, r1
 80020ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4403      	add	r3, r0
 80020d4:	409a      	lsls	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d824      	bhi.n	8002130 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3b05      	subs	r3, #5
 80020f8:	221f      	movs	r2, #31
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	400a      	ands	r2, r1
 8002106:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	3b05      	subs	r3, #5
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	635a      	str	r2, [r3, #52]	; 0x34
 800212e:	e04c      	b.n	80021ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d824      	bhi.n	8002182 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	3b23      	subs	r3, #35	; 0x23
 800214a:	221f      	movs	r2, #31
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43da      	mvns	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	400a      	ands	r2, r1
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3b23      	subs	r3, #35	; 0x23
 8002174:	fa00 f203 	lsl.w	r2, r0, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
 8002180:	e023      	b.n	80021ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	3b41      	subs	r3, #65	; 0x41
 8002194:	221f      	movs	r2, #31
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	400a      	ands	r2, r1
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3b41      	subs	r3, #65	; 0x41
 80021be:	fa00 f203 	lsl.w	r2, r0, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <HAL_ADC_ConfigChannel+0x250>)
 80021cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a28      	ldr	r2, [pc, #160]	; (8002274 <HAL_ADC_ConfigChannel+0x254>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d10f      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d8>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b12      	cmp	r3, #18
 80021de:	d10b      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <HAL_ADC_ConfigChannel+0x254>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12b      	bne.n	800225a <HAL_ADC_ConfigChannel+0x23a>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_ADC_ConfigChannel+0x258>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <HAL_ADC_ConfigChannel+0x1f4>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b11      	cmp	r3, #17
 8002212:	d122      	bne.n	800225a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_ADC_ConfigChannel+0x258>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d111      	bne.n	800225a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_ADC_ConfigChannel+0x25c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_ADC_ConfigChannel+0x260>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	0c9a      	lsrs	r2, r3, #18
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800224c:	e002      	b.n	8002254 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3b01      	subs	r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f9      	bne.n	800224e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40012300 	.word	0x40012300
 8002274:	40012000 	.word	0x40012000
 8002278:	10000012 	.word	0x10000012
 800227c:	20000008 	.word	0x20000008
 8002280:	431bde83 	.word	0x431bde83

08002284 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800228c:	4b79      	ldr	r3, [pc, #484]	; (8002474 <ADC_Init+0x1f0>)
 800228e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	021a      	lsls	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	4a58      	ldr	r2, [pc, #352]	; (8002478 <ADC_Init+0x1f4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d022      	beq.n	8002362 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800232a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800234c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6899      	ldr	r1, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	e00f      	b.n	8002382 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002380:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0202 	bic.w	r2, r2, #2
 8002390:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6899      	ldr	r1, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e1b      	ldrb	r3, [r3, #24]
 800239c:	005a      	lsls	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01b      	beq.n	80023e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	3b01      	subs	r3, #1
 80023dc:	035a      	lsls	r2, r3, #13
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e007      	b.n	80023f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	3b01      	subs	r3, #1
 8002414:	051a      	lsls	r2, r3, #20
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800242c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243a:	025a      	lsls	r2, r3, #9
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	029a      	lsls	r2, r3, #10
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40012300 	.word	0x40012300
 8002478:	0f000001 	.word	0x0f000001

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db0b      	blt.n	800250a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4907      	ldr	r1, [pc, #28]	; (8002518 <__NVIC_EnableIRQ+0x38>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2001      	movs	r0, #1
 8002502:	fa00 f202 	lsl.w	r2, r0, r2
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db0a      	blt.n	8002546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	490c      	ldr	r1, [pc, #48]	; (8002568 <__NVIC_SetPriority+0x4c>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	440b      	add	r3, r1
 8002540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002544:	e00a      	b.n	800255c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4908      	ldr	r1, [pc, #32]	; (800256c <__NVIC_SetPriority+0x50>)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	440b      	add	r3, r1
 800255a:	761a      	strb	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000e100 	.word	0xe000e100
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f1c3 0307 	rsb	r3, r3, #7
 800258a:	2b04      	cmp	r3, #4
 800258c:	bf28      	it	cs
 800258e:	2304      	movcs	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	2b06      	cmp	r3, #6
 8002598:	d902      	bls.n	80025a0 <NVIC_EncodePriority+0x30>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3b03      	subs	r3, #3
 800259e:	e000      	b.n	80025a2 <NVIC_EncodePriority+0x32>
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	4313      	orrs	r3, r2
         );
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	; 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e8:	d301      	bcc.n	80025ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00f      	b.n	800260e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <SysTick_Config+0x40>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f6:	210f      	movs	r1, #15
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025fc:	f7ff ff8e 	bl	800251c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <SysTick_Config+0x40>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <SysTick_Config+0x40>)
 8002608:	2207      	movs	r2, #7
 800260a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	e000e010 	.word	0xe000e010

0800261c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff29 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002644:	f7ff ff3e 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 8002648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7ff ff8e 	bl	8002570 <NVIC_EncodePriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff5d 	bl	800251c <__NVIC_SetPriority>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff31 	bl	80024e0 <__NVIC_EnableIRQ>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ffa2 	bl	80025d8 <SysTick_Config>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026ac:	f7ff fada 	bl	8001c64 <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d008      	beq.n	80026d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e052      	b.n	8002776 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0216 	bic.w	r2, r2, #22
 80026de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_DMA_Abort+0x62>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0208 	bic.w	r2, r2, #8
 800270e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002720:	e013      	b.n	800274a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002722:	f7ff fa9f 	bl	8001c64 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b05      	cmp	r3, #5
 800272e:	d90c      	bls.n	800274a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e015      	b.n	8002776 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e4      	bne.n	8002722 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	223f      	movs	r2, #63	; 0x3f
 800275e:	409a      	lsls	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d004      	beq.n	800279c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e00c      	b.n	80027b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2205      	movs	r2, #5
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e06c      	b.n	80028b0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d106      	bne.n	80027ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2223      	movs	r2, #35	; 0x23
 80027e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7fe ff15 	bl	8001618 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_ETH_Init+0xf4>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a30      	ldr	r2, [pc, #192]	; (80028b8 <HAL_ETH_Init+0xf4>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44
 80027fe:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_ETH_Init+0xf4>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_ETH_Init+0xf8>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <HAL_ETH_Init+0xf8>)
 8002810:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002814:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_ETH_Init+0xf8>)
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4927      	ldr	r1, [pc, #156]	; (80028bc <HAL_ETH_Init+0xf8>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_ETH_Init+0xf8>)
 8002826:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800283e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002840:	f7ff fa10 	bl	8001c64 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002846:	e011      	b.n	800286c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002848:	f7ff fa0c 	bl	8001c64 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002856:	d909      	bls.n	800286c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2204      	movs	r2, #4
 800285c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	22e0      	movs	r2, #224	; 0xe0
 8002864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e021      	b.n	80028b0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e4      	bne.n	8002848 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f958 	bl	8002b34 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f9ff 	bl	8002c88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa55 	bl	8002d3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	461a      	mov	r2, r3
 8002896:	2100      	movs	r1, #0
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f9bd 	bl	8002c18 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2210      	movs	r2, #16
 80028aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40013800 	.word	0x40013800

080028c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <ETH_SetMACConfig+0x15c>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	7c1b      	ldrb	r3, [r3, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <ETH_SetMACConfig+0x28>
 80028e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028e6:	e000      	b.n	80028ea <ETH_SetMACConfig+0x2a>
 80028e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	7c5b      	ldrb	r3, [r3, #17]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <ETH_SetMACConfig+0x38>
 80028f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028f6:	e000      	b.n	80028fa <ETH_SetMACConfig+0x3a>
 80028f8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002900:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	7fdb      	ldrb	r3, [r3, #31]
 8002906:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002908:	431a      	orrs	r2, r3
                        macconf->Speed |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800290e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	7f92      	ldrb	r2, [r2, #30]
 8002914:	2a00      	cmp	r2, #0
 8002916:	d102      	bne.n	800291e <ETH_SetMACConfig+0x5e>
 8002918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800291c:	e000      	b.n	8002920 <ETH_SetMACConfig+0x60>
 800291e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002920:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	7f1b      	ldrb	r3, [r3, #28]
 8002926:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002928:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800292e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	791b      	ldrb	r3, [r3, #4]
 8002934:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800293e:	2a00      	cmp	r2, #0
 8002940:	d102      	bne.n	8002948 <ETH_SetMACConfig+0x88>
 8002942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002946:	e000      	b.n	800294a <ETH_SetMACConfig+0x8a>
 8002948:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800294a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	7bdb      	ldrb	r3, [r3, #15]
 8002950:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002952:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002958:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002960:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002962:	4313      	orrs	r3, r2
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800297a:	2001      	movs	r0, #1
 800297c:	f7ff f97e 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002996:	4013      	ands	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80029a6:	2a00      	cmp	r2, #0
 80029a8:	d101      	bne.n	80029ae <ETH_SetMACConfig+0xee>
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	e000      	b.n	80029b0 <ETH_SetMACConfig+0xf0>
 80029ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80029be:	2a01      	cmp	r2, #1
 80029c0:	d101      	bne.n	80029c6 <ETH_SetMACConfig+0x106>
 80029c2:	2208      	movs	r2, #8
 80029c4:	e000      	b.n	80029c8 <ETH_SetMACConfig+0x108>
 80029c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80029d0:	2a01      	cmp	r2, #1
 80029d2:	d101      	bne.n	80029d8 <ETH_SetMACConfig+0x118>
 80029d4:	2204      	movs	r2, #4
 80029d6:	e000      	b.n	80029da <ETH_SetMACConfig+0x11a>
 80029d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80029e2:	2a01      	cmp	r2, #1
 80029e4:	d101      	bne.n	80029ea <ETH_SetMACConfig+0x12a>
 80029e6:	2202      	movs	r2, #2
 80029e8:	e000      	b.n	80029ec <ETH_SetMACConfig+0x12c>
 80029ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029ec:	4313      	orrs	r3, r2
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7ff f939 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	619a      	str	r2, [r3, #24]
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	ff20810f 	.word	0xff20810f

08002a20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4b3d      	ldr	r3, [pc, #244]	; (8002b30 <ETH_SetDMAConfig+0x110>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	7b1b      	ldrb	r3, [r3, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <ETH_SetDMAConfig+0x2c>
 8002a46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a4a:	e000      	b.n	8002a4e <ETH_SetDMAConfig+0x2e>
 8002a4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	7b5b      	ldrb	r3, [r3, #13]
 8002a52:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a54:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	7f52      	ldrb	r2, [r2, #29]
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	d102      	bne.n	8002a64 <ETH_SetDMAConfig+0x44>
 8002a5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a62:	e000      	b.n	8002a66 <ETH_SetDMAConfig+0x46>
 8002a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7b9b      	ldrb	r3, [r3, #14]
 8002a6c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a6e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	7f1b      	ldrb	r3, [r3, #28]
 8002a7a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	7f9b      	ldrb	r3, [r3, #30]
 8002a82:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a84:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a92:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a94:	4313      	orrs	r3, r2
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7ff f8e0 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ad4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ada:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ae0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ae8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002aea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002af2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002af8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b06:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b14:	2001      	movs	r0, #1
 8002b16:	f7ff f8b1 	bl	8001c7c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	f8de3f23 	.word	0xf8de3f23

08002b34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b0a6      	sub	sp, #152	; 0x98
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b70:	2300      	movs	r3, #0
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ba8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fe86 	bl	80028c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002be0:	2301      	movs	r3, #1
 8002be2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002be8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ff08 	bl	8002a20 <ETH_SetDMAConfig>
}
 8002c10:	bf00      	nop
 8002c12:	3798      	adds	r7, #152	; 0x98
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3305      	adds	r3, #5
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	3204      	adds	r2, #4
 8002c30:	7812      	ldrb	r2, [r2, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <ETH_MACAddressConfig+0x68>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3303      	adds	r3, #3
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	061a      	lsls	r2, r3, #24
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3301      	adds	r3, #1
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <ETH_MACAddressConfig+0x6c>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	6013      	str	r3, [r2, #0]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40028040 	.word	0x40028040
 8002c84:	40028044 	.word	0x40028044

08002c88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e03e      	b.n	8002d14 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68d9      	ldr	r1, [r3, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	3206      	adds	r2, #6
 8002cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d80c      	bhi.n	8002cf8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68d9      	ldr	r1, [r3, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	e004      	b.n	8002d02 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d9bd      	bls.n	8002c96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2c:	611a      	str	r2, [r3, #16]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e046      	b.n	8002dd6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6919      	ldr	r1, [r3, #16]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2200      	movs	r2, #0
 8002d76:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d84:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002d8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	3212      	adds	r2, #18
 8002da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d80c      	bhi.n	8002dc6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6919      	ldr	r1, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	e004      	b.n	8002dd0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d9b5      	bls.n	8002d48 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e177      	b.n	8003120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f040 8166 	bne.w	800311a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d005      	beq.n	8002e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d130      	bne.n	8002ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0201 	and.w	r2, r3, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d017      	beq.n	8002f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d123      	bne.n	8002f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3208      	adds	r2, #8
 8002f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	220f      	movs	r2, #15
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0203 	and.w	r2, r3, #3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80c0 	beq.w	800311a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_GPIO_Init+0x324>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a65      	ldr	r2, [pc, #404]	; (8003138 <HAL_GPIO_Init+0x324>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_GPIO_Init+0x324>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb6:	4a61      	ldr	r2, [pc, #388]	; (800313c <HAL_GPIO_Init+0x328>)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	; (8003140 <HAL_GPIO_Init+0x32c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d037      	beq.n	8003052 <HAL_GPIO_Init+0x23e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a57      	ldr	r2, [pc, #348]	; (8003144 <HAL_GPIO_Init+0x330>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d031      	beq.n	800304e <HAL_GPIO_Init+0x23a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a56      	ldr	r2, [pc, #344]	; (8003148 <HAL_GPIO_Init+0x334>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x236>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a55      	ldr	r2, [pc, #340]	; (800314c <HAL_GPIO_Init+0x338>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d025      	beq.n	8003046 <HAL_GPIO_Init+0x232>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a54      	ldr	r2, [pc, #336]	; (8003150 <HAL_GPIO_Init+0x33c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <HAL_GPIO_Init+0x22e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a53      	ldr	r2, [pc, #332]	; (8003154 <HAL_GPIO_Init+0x340>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x22a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_GPIO_Init+0x344>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x226>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a51      	ldr	r2, [pc, #324]	; (800315c <HAL_GPIO_Init+0x348>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x222>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a50      	ldr	r2, [pc, #320]	; (8003160 <HAL_GPIO_Init+0x34c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x21e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4f      	ldr	r2, [pc, #316]	; (8003164 <HAL_GPIO_Init+0x350>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x21a>
 800302a:	2309      	movs	r3, #9
 800302c:	e012      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800302e:	230a      	movs	r3, #10
 8003030:	e010      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003032:	2308      	movs	r3, #8
 8003034:	e00e      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003036:	2307      	movs	r3, #7
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800303a:	2306      	movs	r3, #6
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	; (800313c <HAL_GPIO_Init+0x328>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_GPIO_Init+0x354>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a34      	ldr	r2, [pc, #208]	; (8003168 <HAL_GPIO_Init+0x354>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_GPIO_Init+0x354>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a29      	ldr	r2, [pc, #164]	; (8003168 <HAL_GPIO_Init+0x354>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_GPIO_Init+0x354>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ea:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <HAL_GPIO_Init+0x354>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_GPIO_Init+0x354>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <HAL_GPIO_Init+0x354>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae84 	bls.w	8002e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40021c00 	.word	0x40021c00
 8003160:	40022000 	.word	0x40022000
 8003164:	40022400 	.word	0x40022400
 8003168:	40013c00 	.word	0x40013c00

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800319e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a0:	b08f      	sub	sp, #60	; 0x3c
 80031a2:	af0a      	add	r7, sp, #40	; 0x28
 80031a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e10f      	b.n	80033d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fb70 	bl	80018b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2203      	movs	r2, #3
 80031d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 fe63 	bl	8004eba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	687e      	ldr	r6, [r7, #4]
 80031fc:	466d      	mov	r5, sp
 80031fe:	f106 0410 	add.w	r4, r6, #16
 8003202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800320a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800320e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003212:	1d33      	adds	r3, r6, #4
 8003214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003216:	6838      	ldr	r0, [r7, #0]
 8003218:	f001 fdee 	bl	8004df8 <USB_CoreInit>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0d0      	b.n	80033d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f001 fe51 	bl	8004edc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	e04a      	b.n	80032d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	333d      	adds	r3, #61	; 0x3d
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	333c      	adds	r3, #60	; 0x3c
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	b298      	uxth	r0, r3
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3344      	adds	r3, #68	; 0x44
 800327c:	4602      	mov	r2, r0
 800327e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3340      	adds	r3, #64	; 0x40
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	3348      	adds	r3, #72	; 0x48
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	334c      	adds	r3, #76	; 0x4c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3354      	adds	r3, #84	; 0x54
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	3301      	adds	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d3af      	bcc.n	8003240 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e044      	b.n	8003370 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	3301      	adds	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d3b5      	bcc.n	80032e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	687e      	ldr	r6, [r7, #4]
 8003382:	466d      	mov	r5, sp
 8003384:	f106 0410 	add.w	r4, r6, #16
 8003388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003390:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003394:	e885 0003 	stmia.w	r5, {r0, r1}
 8003398:	1d33      	adds	r3, r6, #4
 800339a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800339c:	6838      	ldr	r0, [r7, #0]
 800339e:	f001 fde9 	bl	8004f74 <USB_DevInit>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00d      	b.n	80033d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 ffb4 	bl	8005336 <USB_DevDisconnect>

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e267      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d075      	beq.n	80034e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f6:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d00c      	beq.n	800341c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4b85      	ldr	r3, [pc, #532]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340a:	2b08      	cmp	r3, #8
 800340c:	d112      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341a:	d10b      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	4b7e      	ldr	r3, [pc, #504]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05b      	beq.n	80034e0 <HAL_RCC_OscConfig+0x108>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d157      	bne.n	80034e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e242      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x74>
 800343e:	4b76      	ldr	r3, [pc, #472]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a75      	ldr	r2, [pc, #468]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0xb0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x98>
 8003456:	4b70      	ldr	r3, [pc, #448]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6f      	ldr	r2, [pc, #444]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6c      	ldr	r2, [pc, #432]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xb0>
 8003470:	4b69      	ldr	r3, [pc, #420]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a68      	ldr	r2, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b66      	ldr	r3, [pc, #408]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe fbe8 	bl	8001c64 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe fbe4 	bl	8001c64 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e207      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0xc0>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe fbd4 	bl	8001c64 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe fbd0 	bl	8001c64 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1f3      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	4b51      	ldr	r3, [pc, #324]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0xe8>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d063      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003502:	2b08      	cmp	r3, #8
 8003504:	d11c      	bne.n	8003540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b44      	ldr	r3, [pc, #272]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d116      	bne.n	8003540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x152>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e1c7      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4937      	ldr	r1, [pc, #220]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	e03a      	b.n	80035b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003548:	4b34      	ldr	r3, [pc, #208]	; (800361c <HAL_RCC_OscConfig+0x244>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fe fb89 	bl	8001c64 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003556:	f7fe fb85 	bl	8001c64 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1a8      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4925      	ldr	r1, [pc, #148]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_OscConfig+0x244>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe fb68 	bl	8001c64 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003598:	f7fe fb64 	bl	8001c64 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e187      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d036      	beq.n	8003630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_RCC_OscConfig+0x248>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fe fb48 	bl	8001c64 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d8:	f7fe fb44 	bl	8001c64 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e167      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80035ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x200>
 80035f6:	e01b      	b.n	8003630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_OscConfig+0x248>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fb31 	bl	8001c64 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	e00e      	b.n	8003624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003606:	f7fe fb2d 	bl	8001c64 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d907      	bls.n	8003624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e150      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
 8003618:	40023800 	.word	0x40023800
 800361c:	42470000 	.word	0x42470000
 8003620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	4b88      	ldr	r3, [pc, #544]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ea      	bne.n	8003606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8097 	beq.w	800376c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003642:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	4b7d      	ldr	r3, [pc, #500]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a7c      	ldr	r2, [pc, #496]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b7a      	ldr	r3, [pc, #488]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b77      	ldr	r3, [pc, #476]	; (800384c <HAL_RCC_OscConfig+0x474>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367a:	4b74      	ldr	r3, [pc, #464]	; (800384c <HAL_RCC_OscConfig+0x474>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a73      	ldr	r2, [pc, #460]	; (800384c <HAL_RCC_OscConfig+0x474>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fe faed 	bl	8001c64 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe fae9 	bl	8001c64 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e10c      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_OscConfig+0x474>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2ea>
 80036b4:	4b64      	ldr	r3, [pc, #400]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a63      	ldr	r2, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	e01c      	b.n	80036fc <HAL_RCC_OscConfig+0x324>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x30c>
 80036ca:	4b5f      	ldr	r3, [pc, #380]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a5e      	ldr	r2, [pc, #376]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	4b5c      	ldr	r3, [pc, #368]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a5b      	ldr	r2, [pc, #364]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	e00b      	b.n	80036fc <HAL_RCC_OscConfig+0x324>
 80036e4:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a57      	ldr	r2, [pc, #348]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a54      	ldr	r2, [pc, #336]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 0304 	bic.w	r3, r3, #4
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d015      	beq.n	8003730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fe faae 	bl	8001c64 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fe faaa 	bl	8001c64 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0cb      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	4b49      	ldr	r3, [pc, #292]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ee      	beq.n	800370c <HAL_RCC_OscConfig+0x334>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003730:	f7fe fa98 	bl	8001c64 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fe fa94 	bl	8001c64 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0b5      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374e:	4b3e      	ldr	r3, [pc, #248]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ee      	bne.n	8003738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	4a38      	ldr	r2, [pc, #224]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a1 	beq.w	80038b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b08      	cmp	r3, #8
 8003780:	d05c      	beq.n	800383c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d141      	bne.n	800380e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe fa68 	bl	8001c64 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe fa64 	bl	8001c64 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e087      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	3b01      	subs	r3, #1
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	491b      	ldr	r1, [pc, #108]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e0:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fa3d 	bl	8001c64 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe fa39 	bl	8001c64 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e05c      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x416>
 800380c:	e054      	b.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe fa26 	bl	8001c64 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fe fa22 	bl	8001c64 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e045      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x444>
 800383a:	e03d      	b.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e038      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
 8003848:	40023800 	.word	0x40023800
 800384c:	40007000 	.word	0x40007000
 8003850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x4ec>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d028      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d121      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d11a      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800388a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	3b01      	subs	r3, #1
 800389e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0cc      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d90c      	bls.n	8003904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b65      	ldr	r3, [pc, #404]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0b8      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800391c:	4b59      	ldr	r3, [pc, #356]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003934:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	494d      	ldr	r1, [pc, #308]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d044      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d119      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d003      	beq.n	8003986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	2b03      	cmp	r3, #3
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e067      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4934      	ldr	r1, [pc, #208]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b8:	f7fe f954 	bl	8001c64 <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c0:	f7fe f950 	bl	8001c64 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e04f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 020c 	and.w	r2, r3, #12
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d1eb      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d20c      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e032      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4916      	ldr	r1, [pc, #88]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	490e      	ldr	r1, [pc, #56]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4e:	f000 f821 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	490a      	ldr	r1, [pc, #40]	; (8003a88 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	5ccb      	ldrb	r3, [r1, r3]
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe f8b4 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00
 8003a84:	40023800 	.word	0x40023800
 8003a88:	08005f28 	.word	0x08005f28
 8003a8c:	20000008 	.word	0x20000008
 8003a90:	2000000c 	.word	0x2000000c

08003a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b094      	sub	sp, #80	; 0x50
 8003a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aac:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	f200 80e1 	bhi.w	8003c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac6:	e0db      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003acc:	e0db      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ace:	4b73      	ldr	r3, [pc, #460]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad2:	e0d8      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ade:	4b6d      	ldr	r3, [pc, #436]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aea:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	2200      	movs	r2, #0
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30
 8003afe:	2300      	movs	r3, #0
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
 8003b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b06:	4622      	mov	r2, r4
 8003b08:	462b      	mov	r3, r5
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	0159      	lsls	r1, r3, #5
 8003b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b18:	0150      	lsls	r0, r2, #5
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4621      	mov	r1, r4
 8003b20:	1a51      	subs	r1, r2, r1
 8003b22:	6139      	str	r1, [r7, #16]
 8003b24:	4629      	mov	r1, r5
 8003b26:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b38:	4659      	mov	r1, fp
 8003b3a:	018b      	lsls	r3, r1, #6
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b42:	4651      	mov	r1, sl
 8003b44:	018a      	lsls	r2, r1, #6
 8003b46:	4651      	mov	r1, sl
 8003b48:	ebb2 0801 	subs.w	r8, r2, r1
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b66:	4690      	mov	r8, r2
 8003b68:	4699      	mov	r9, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	eb18 0303 	adds.w	r3, r8, r3
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	462b      	mov	r3, r5
 8003b74:	eb49 0303 	adc.w	r3, r9, r3
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b86:	4629      	mov	r1, r5
 8003b88:	024b      	lsls	r3, r1, #9
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b90:	4621      	mov	r1, r4
 8003b92:	024a      	lsls	r2, r1, #9
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ba4:	f7fc ff82 	bl	8000aac <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4613      	mov	r3, r2
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	e058      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bcc:	4642      	mov	r2, r8
 8003bce:	464b      	mov	r3, r9
 8003bd0:	f04f 0000 	mov.w	r0, #0
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	0159      	lsls	r1, r3, #5
 8003bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bde:	0150      	lsls	r0, r2, #5
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4641      	mov	r1, r8
 8003be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bea:	4649      	mov	r1, r9
 8003bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c04:	ebb2 040a 	subs.w	r4, r2, sl
 8003c08:	eb63 050b 	sbc.w	r5, r3, fp
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	00eb      	lsls	r3, r5, #3
 8003c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c1a:	00e2      	lsls	r2, r4, #3
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	461d      	mov	r5, r3
 8003c20:	4643      	mov	r3, r8
 8003c22:	18e3      	adds	r3, r4, r3
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	464b      	mov	r3, r9
 8003c28:	eb45 0303 	adc.w	r3, r5, r3
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	028b      	lsls	r3, r1, #10
 8003c3e:	4621      	mov	r1, r4
 8003c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c44:	4621      	mov	r1, r4
 8003c46:	028a      	lsls	r2, r1, #10
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	61fa      	str	r2, [r7, #28]
 8003c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c58:	f7fc ff28 	bl	8000aac <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4613      	mov	r3, r2
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7e:	e002      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3750      	adds	r7, #80	; 0x50
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	007a1200 	.word	0x007a1200

08003ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000008 	.word	0x20000008

08003cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cbc:	f7ff fff0 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0a9b      	lsrs	r3, r3, #10
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	08005f38 	.word	0x08005f38

08003ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ce4:	f7ff ffdc 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0b5b      	lsrs	r3, r3, #13
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4903      	ldr	r1, [pc, #12]	; (8003d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	08005f38 	.word	0x08005f38

08003d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e03f      	b.n	8003d9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fd38 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fddf 	bl	8004910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b08a      	sub	sp, #40	; 0x28
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d17c      	bne.n	8003ebc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_UART_Transmit+0x2c>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e075      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Transmit+0x3e>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e06e      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2221      	movs	r2, #33	; 0x21
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df6:	f7fd ff35 	bl	8001c64 <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d108      	bne.n	8003e24 <HAL_UART_Transmit+0x82>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e003      	b.n	8003e2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e34:	e02a      	b.n	8003e8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fb1f 	bl	8004484 <UART_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e036      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	3302      	adds	r3, #2
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e007      	b.n	8003e7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1cf      	bne.n	8003e36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 faef 	bl	8004484 <UART_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e006      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d11d      	bne.n	8003f1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_UART_Receive_IT+0x26>
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e016      	b.n	8003f1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Receive_IT+0x38>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e00f      	b.n	8003f1e <HAL_UART_Receive_IT+0x58>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fb24 	bl	8004560 <UART_Start_Receive_IT>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	e000      	b.n	8003f1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b0ba      	sub	sp, #232	; 0xe8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_UART_IRQHandler+0x66>
 8003f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fc07 	bl	800479a <UART_Receive_IT>
      return;
 8003f8c:	e256      	b.n	800443c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80de 	beq.w	8004154 <HAL_UART_IRQHandler+0x22c>
 8003f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80d1 	beq.w	8004154 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_UART_IRQHandler+0xae>
 8003fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <HAL_UART_IRQHandler+0xd2>
 8003fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0202 	orr.w	r2, r3, #2
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_UART_IRQHandler+0xf6>
 8004006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0204 	orr.w	r2, r3, #4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d011      	beq.n	800404e <HAL_UART_IRQHandler+0x126>
 800402a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0208 	orr.w	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 81ed 	beq.w	8004432 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_UART_IRQHandler+0x14e>
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fb92 	bl	800479a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <HAL_UART_IRQHandler+0x17a>
 800409a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04f      	beq.n	8004142 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa9a 	bl	80045dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d141      	bne.n	800413a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3314      	adds	r3, #20
 80040bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3314      	adds	r3, #20
 80040de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1d9      	bne.n	80040b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	2b00      	cmp	r3, #0
 8004108:	d013      	beq.n	8004132 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	4a7d      	ldr	r2, [pc, #500]	; (8004304 <HAL_UART_IRQHandler+0x3dc>)
 8004110:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fb31 	bl	800277e <HAL_DMA_Abort_IT>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800412c:	4610      	mov	r0, r2
 800412e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	e00e      	b.n	8004150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f990 	bl	8004458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	e00a      	b.n	8004150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f98c 	bl	8004458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	e006      	b.n	8004150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f988 	bl	8004458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800414e:	e170      	b.n	8004432 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	bf00      	nop
    return;
 8004152:	e16e      	b.n	8004432 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	2b01      	cmp	r3, #1
 800415a:	f040 814a 	bne.w	80043f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8143 	beq.w	80043f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800416c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 813c 	beq.w	80043f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	f040 80b4 	bne.w	8004308 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8140 	beq.w	8004436 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041be:	429a      	cmp	r2, r3
 80041c0:	f080 8139 	bcs.w	8004436 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d6:	f000 8088 	beq.w	80042ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004206:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800420a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004212:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800421e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1d9      	bne.n	80041da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800424a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800424e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004252:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800425c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e1      	bne.n	8004226 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004286:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004288:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800428c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e3      	bne.n	8004262 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ba:	f023 0310 	bic.w	r3, r3, #16
 80042be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e3      	bne.n	80042a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe f9da 	bl	800269e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8b6 	bl	800446c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004300:	e099      	b.n	8004436 <HAL_UART_IRQHandler+0x50e>
 8004302:	bf00      	nop
 8004304:	080046a3 	.word	0x080046a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004310:	b29b      	uxth	r3, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 808b 	beq.w	800443a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8086 	beq.w	800443a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004344:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004352:	647a      	str	r2, [r7, #68]	; 0x44
 8004354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e3      	bne.n	800432e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	623b      	str	r3, [r7, #32]
   return(result);
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800438a:	633a      	str	r2, [r7, #48]	; 0x30
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e3      	bne.n	8004366 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043d0:	61fa      	str	r2, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	617b      	str	r3, [r7, #20]
   return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e3      	bne.n	80043ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f83e 	bl	800446c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f0:	e023      	b.n	800443a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_UART_IRQHandler+0x4ea>
 80043fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f95d 	bl	80046ca <UART_Transmit_IT>
    return;
 8004410:	e014      	b.n	800443c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00e      	beq.n	800443c <HAL_UART_IRQHandler+0x514>
 800441e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d008      	beq.n	800443c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f99d 	bl	800476a <UART_EndTransmit_IT>
    return;
 8004430:	e004      	b.n	800443c <HAL_UART_IRQHandler+0x514>
    return;
 8004432:	bf00      	nop
 8004434:	e002      	b.n	800443c <HAL_UART_IRQHandler+0x514>
      return;
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <HAL_UART_IRQHandler+0x514>
      return;
 800443a:	bf00      	nop
  }
}
 800443c:	37e8      	adds	r7, #232	; 0xe8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop

08004444 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b090      	sub	sp, #64	; 0x40
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004494:	e050      	b.n	8004538 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449c:	d04c      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800449e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a4:	f7fd fbde 	bl	8001c64 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d241      	bcs.n	8004538 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d4:	637a      	str	r2, [r7, #52]	; 0x34
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3314      	adds	r3, #20
 80044ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	613b      	str	r3, [r7, #16]
   return(result);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004508:	623a      	str	r2, [r7, #32]
 800450a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	69f9      	ldr	r1, [r7, #28]
 800450e:	6a3a      	ldr	r2, [r7, #32]
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	61bb      	str	r3, [r7, #24]
   return(result);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e00f      	b.n	8004558 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	429a      	cmp	r2, r3
 8004554:	d09f      	beq.n	8004496 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3740      	adds	r7, #64	; 0x40
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	88fa      	ldrh	r2, [r7, #6]
 800457e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2222      	movs	r2, #34	; 0x22
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0220 	orr.w	r2, r2, #32
 80045cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b095      	sub	sp, #84	; 0x54
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004604:	643a      	str	r2, [r7, #64]	; 0x40
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800460a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	61fb      	str	r3, [r7, #28]
   return(result);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800463e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d119      	bne.n	8004688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	60bb      	str	r3, [r7, #8]
   return(result);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 0310 	bic.w	r3, r3, #16
 800466a:	647b      	str	r3, [r7, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004674:	61ba      	str	r2, [r7, #24]
 8004676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	613b      	str	r3, [r7, #16]
   return(result);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004696:	bf00      	nop
 8004698:	3754      	adds	r7, #84	; 0x54
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff fecb 	bl	8004458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b21      	cmp	r3, #33	; 0x21
 80046dc:	d13e      	bne.n	800475c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e6:	d114      	bne.n	8004712 <UART_Transmit_IT+0x48>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d110      	bne.n	8004712 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	e008      	b.n	8004724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6211      	str	r1, [r2, #32]
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29b      	uxth	r3, r3
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4619      	mov	r1, r3
 8004732:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10f      	bne.n	8004758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004780:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fe5a 	bl	8004444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b08c      	sub	sp, #48	; 0x30
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b22      	cmp	r3, #34	; 0x22
 80047ac:	f040 80ab 	bne.w	8004906 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b8:	d117      	bne.n	80047ea <UART_Receive_IT+0x50>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d113      	bne.n	80047ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	1c9a      	adds	r2, r3, #2
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28
 80047e8:	e026      	b.n	8004838 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fc:	d007      	beq.n	800480e <UART_Receive_IT+0x74>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <UART_Receive_IT+0x82>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e008      	b.n	800482e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004828:	b2da      	uxtb	r2, r3
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4619      	mov	r1, r3
 8004846:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004848:	2b00      	cmp	r3, #0
 800484a:	d15a      	bne.n	8004902 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0220 	bic.w	r2, r2, #32
 800485a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	2b01      	cmp	r3, #1
 800488a:	d135      	bne.n	80048f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	613b      	str	r3, [r7, #16]
   return(result);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f023 0310 	bic.w	r3, r3, #16
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	623a      	str	r2, [r7, #32]
 80048b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	69f9      	ldr	r1, [r7, #28]
 80048b8:	6a3a      	ldr	r2, [r7, #32]
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e5      	bne.n	8004892 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d10a      	bne.n	80048ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff fdbb 	bl	800446c <HAL_UARTEx_RxEventCallback>
 80048f6:	e002      	b.n	80048fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fc faad 	bl	8000e58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e002      	b.n	8004908 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e000      	b.n	8004908 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
  }
}
 8004908:	4618      	mov	r0, r3
 800490a:	3730      	adds	r7, #48	; 0x30
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b0c0      	sub	sp, #256	; 0x100
 8004916:	af00      	add	r7, sp, #0
 8004918:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	68d9      	ldr	r1, [r3, #12]
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	ea40 0301 	orr.w	r3, r0, r1
 8004938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004968:	f021 010c 	bic.w	r1, r1, #12
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004976:	430b      	orrs	r3, r1
 8004978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	6999      	ldr	r1, [r3, #24]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	ea40 0301 	orr.w	r3, r0, r1
 8004996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b8f      	ldr	r3, [pc, #572]	; (8004bdc <UART_SetConfig+0x2cc>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d005      	beq.n	80049b0 <UART_SetConfig+0xa0>
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <UART_SetConfig+0x2d0>)
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d104      	bne.n	80049ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7ff f996 	bl	8003ce0 <HAL_RCC_GetPCLK2Freq>
 80049b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049b8:	e003      	b.n	80049c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7ff f97d 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 80049be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049cc:	f040 810c 	bne.w	8004be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ea:	415b      	adcs	r3, r3
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049f2:	4621      	mov	r1, r4
 80049f4:	eb12 0801 	adds.w	r8, r2, r1
 80049f8:	4629      	mov	r1, r5
 80049fa:	eb43 0901 	adc.w	r9, r3, r1
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a12:	4690      	mov	r8, r2
 8004a14:	4699      	mov	r9, r3
 8004a16:	4623      	mov	r3, r4
 8004a18:	eb18 0303 	adds.w	r3, r8, r3
 8004a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a20:	462b      	mov	r3, r5
 8004a22:	eb49 0303 	adc.w	r3, r9, r3
 8004a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a3e:	460b      	mov	r3, r1
 8004a40:	18db      	adds	r3, r3, r3
 8004a42:	653b      	str	r3, [r7, #80]	; 0x50
 8004a44:	4613      	mov	r3, r2
 8004a46:	eb42 0303 	adc.w	r3, r2, r3
 8004a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a54:	f7fc f82a 	bl	8000aac <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	011c      	lsls	r4, r3, #4
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a80:	415b      	adcs	r3, r3
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a88:	4641      	mov	r1, r8
 8004a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb43 0b01 	adc.w	fp, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa8:	4692      	mov	sl, r2
 8004aaa:	469b      	mov	fp, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	eb1a 0303 	adds.w	r3, sl, r3
 8004ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8004abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004acc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	18db      	adds	r3, r3, r3
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ada:	4613      	mov	r3, r2
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aea:	f7fb ffdf 	bl	8000aac <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004af6:	fba3 2301 	umull	r2, r3, r3, r1
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2264      	movs	r2, #100	; 0x64
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	1acb      	subs	r3, r1, r3
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b18:	441c      	add	r4, r3
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b34:	415b      	adcs	r3, r3
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6339      	str	r1, [r7, #48]	; 0x30
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b70:	464b      	mov	r3, r9
 8004b72:	460a      	mov	r2, r1
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b90:	460b      	mov	r3, r1
 8004b92:	18db      	adds	r3, r3, r3
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b96:	4613      	mov	r3, r2
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ba6:	f7fb ff81 	bl	8000aac <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	2164      	movs	r1, #100	; 0x64
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	3332      	adds	r3, #50	; 0x32
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	f003 0207 	and.w	r2, r3, #7
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4422      	add	r2, r4
 8004bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd8:	e105      	b.n	8004de6 <UART_SetConfig+0x4d6>
 8004bda:	bf00      	nop
 8004bdc:	40011000 	.word	0x40011000
 8004be0:	40011400 	.word	0x40011400
 8004be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	1891      	adds	r1, r2, r2
 8004c00:	6239      	str	r1, [r7, #32]
 8004c02:	415b      	adcs	r3, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	1854      	adds	r4, r2, r1
 8004c0e:	4649      	mov	r1, r9
 8004c10:	eb43 0501 	adc.w	r5, r3, r1
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	00eb      	lsls	r3, r5, #3
 8004c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c22:	00e2      	lsls	r2, r4, #3
 8004c24:	4614      	mov	r4, r2
 8004c26:	461d      	mov	r5, r3
 8004c28:	4643      	mov	r3, r8
 8004c2a:	18e3      	adds	r3, r4, r3
 8004c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c30:	464b      	mov	r3, r9
 8004c32:	eb45 0303 	adc.w	r3, r5, r3
 8004c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c56:	4629      	mov	r1, r5
 8004c58:	008b      	lsls	r3, r1, #2
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c60:	4621      	mov	r1, r4
 8004c62:	008a      	lsls	r2, r1, #2
 8004c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c68:	f7fb ff20 	bl	8000aac <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004c72:	fba3 2302 	umull	r2, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	011c      	lsls	r4, r3, #4
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	61b9      	str	r1, [r7, #24]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	1851      	adds	r1, r2, r1
 8004ca0:	6139      	str	r1, [r7, #16]
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	414b      	adcs	r3, r1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	00cb      	lsls	r3, r1, #3
 8004cb8:	4651      	mov	r1, sl
 8004cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	00ca      	lsls	r2, r1, #3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	460a      	mov	r2, r1
 8004cd4:	eb42 0303 	adc.w	r3, r2, r3
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	008b      	lsls	r3, r1, #2
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfe:	4641      	mov	r1, r8
 8004d00:	008a      	lsls	r2, r1, #2
 8004d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d06:	f7fb fed1 	bl	8000aac <__aeabi_uldivmod>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d10:	fba3 1302 	umull	r1, r3, r3, r2
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	2164      	movs	r1, #100	; 0x64
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	3332      	adds	r3, #50	; 0x32
 8004d22:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2e:	441c      	add	r4, r3
 8004d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d34:	2200      	movs	r2, #0
 8004d36:	673b      	str	r3, [r7, #112]	; 0x70
 8004d38:	677a      	str	r2, [r7, #116]	; 0x74
 8004d3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d3e:	4642      	mov	r2, r8
 8004d40:	464b      	mov	r3, r9
 8004d42:	1891      	adds	r1, r2, r2
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	415b      	adcs	r3, r3
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4e:	4641      	mov	r1, r8
 8004d50:	1851      	adds	r1, r2, r1
 8004d52:	6039      	str	r1, [r7, #0]
 8004d54:	4649      	mov	r1, r9
 8004d56:	414b      	adcs	r3, r1
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d66:	4659      	mov	r1, fp
 8004d68:	00cb      	lsls	r3, r1, #3
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d70:	4651      	mov	r1, sl
 8004d72:	00ca      	lsls	r2, r1, #3
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4642      	mov	r2, r8
 8004d7c:	189b      	adds	r3, r3, r2
 8004d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	663b      	str	r3, [r7, #96]	; 0x60
 8004d94:	667a      	str	r2, [r7, #100]	; 0x64
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004da2:	4649      	mov	r1, r9
 8004da4:	008b      	lsls	r3, r1, #2
 8004da6:	4641      	mov	r1, r8
 8004da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dac:	4641      	mov	r1, r8
 8004dae:	008a      	lsls	r2, r1, #2
 8004db0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004db4:	f7fb fe7a 	bl	8000aac <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2164      	movs	r1, #100	; 0x64
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	3332      	adds	r3, #50	; 0x32
 8004dd0:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	f003 020f 	and.w	r2, r3, #15
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4422      	add	r2, r4
 8004de4:	609a      	str	r2, [r3, #8]
}
 8004de6:	bf00      	nop
 8004de8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df2:	bf00      	nop
 8004df4:	51eb851f 	.word	0x51eb851f

08004df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df8:	b084      	sub	sp, #16
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	f107 001c 	add.w	r0, r7, #28
 8004e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d122      	bne.n	8004e56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 faa2 	bl	8005394 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e01a      	b.n	8004e8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa96 	bl	8005394 <USB_CoreReset>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e7e:	e005      	b.n	8004e8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d10b      	bne.n	8004eaa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f043 0206 	orr.w	r2, r3, #6
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb6:	b004      	add	sp, #16
 8004eb8:	4770      	bx	lr

08004eba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d115      	bne.n	8004f2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	f7fc feb6 	bl	8001c7c <HAL_Delay>
      ms++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa2e 	bl	8005378 <USB_GetMode>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d01e      	beq.n	8004f60 <USB_SetCurrentMode+0x84>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b31      	cmp	r3, #49	; 0x31
 8004f26:	d9f0      	bls.n	8004f0a <USB_SetCurrentMode+0x2e>
 8004f28:	e01a      	b.n	8004f60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d115      	bne.n	8004f5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f7fc fe9d 	bl	8001c7c <HAL_Delay>
      ms++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3301      	adds	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fa15 	bl	8005378 <USB_GetMode>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <USB_SetCurrentMode+0x84>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b31      	cmp	r3, #49	; 0x31
 8004f58:	d9f0      	bls.n	8004f3c <USB_SetCurrentMode+0x60>
 8004f5a:	e001      	b.n	8004f60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e005      	b.n	8004f6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b32      	cmp	r3, #50	; 0x32
 8004f64:	d101      	bne.n	8004f6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f74:	b084      	sub	sp, #16
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e009      	b.n	8004fa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3340      	adds	r3, #64	; 0x40
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b0e      	cmp	r3, #14
 8004fac:	d9f2      	bls.n	8004f94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11c      	bne.n	8004fee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc2:	f043 0302 	orr.w	r3, r3, #2
 8004fc6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38
 8004fec:	e00b      	b.n	8005006 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800500c:	461a      	mov	r2, r3
 800500e:	2300      	movs	r3, #0
 8005010:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005018:	4619      	mov	r1, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005020:	461a      	mov	r2, r3
 8005022:	680b      	ldr	r3, [r1, #0]
 8005024:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10c      	bne.n	8005046 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005032:	2100      	movs	r1, #0
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f965 	bl	8005304 <USB_SetDevSpeed>
 800503a:	e008      	b.n	800504e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800503c:	2101      	movs	r1, #1
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f960 	bl	8005304 <USB_SetDevSpeed>
 8005044:	e003      	b.n	800504e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005046:	2103      	movs	r1, #3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f95b 	bl	8005304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800504e:	2110      	movs	r1, #16
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f8f3 	bl	800523c <USB_FlushTxFifo>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f91f 	bl	80052a4 <USB_FlushRxFifo>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	461a      	mov	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	461a      	mov	r2, r3
 8005084:	2300      	movs	r3, #0
 8005086:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	461a      	mov	r2, r3
 8005090:	2300      	movs	r3, #0
 8005092:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	e043      	b.n	8005122 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b0:	d118      	bne.n	80050e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e013      	b.n	80050f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050da:	461a      	mov	r2, r3
 80050dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e008      	b.n	80050f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	461a      	mov	r2, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	461a      	mov	r2, r3
 8005104:	2300      	movs	r3, #0
 8005106:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	461a      	mov	r2, r3
 8005116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800511a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	3301      	adds	r3, #1
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d3b7      	bcc.n	800509a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	e043      	b.n	80051b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005146:	d118      	bne.n	800517a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	461a      	mov	r2, r3
 800515c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e013      	b.n	800518c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	461a      	mov	r2, r3
 8005172:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	e008      	b.n	800518c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	461a      	mov	r2, r3
 800519a:	2300      	movs	r3, #0
 800519c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	461a      	mov	r2, r3
 80051ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3301      	adds	r3, #1
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3b7      	bcc.n	8005130 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f043 0210 	orr.w	r2, r3, #16
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <USB_DevInit+0x2c4>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f043 0208 	orr.w	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005234:	b004      	add	sp, #16
 8005236:	4770      	bx	lr
 8005238:	803c3800 	.word	0x803c3800

0800523c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <USB_FlushTxFifo+0x64>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d901      	bls.n	800525c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e01b      	b.n	8005294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	daf2      	bge.n	800524a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	019b      	lsls	r3, r3, #6
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <USB_FlushTxFifo+0x64>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e006      	b.n	8005294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b20      	cmp	r3, #32
 8005290:	d0f0      	beq.n	8005274 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	00030d40 	.word	0x00030d40

080052a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a11      	ldr	r2, [pc, #68]	; (8005300 <USB_FlushRxFifo+0x5c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e018      	b.n	80052f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	daf2      	bge.n	80052b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2210      	movs	r2, #16
 80052d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4a08      	ldr	r2, [pc, #32]	; (8005300 <USB_FlushRxFifo+0x5c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e006      	b.n	80052f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d0f0      	beq.n	80052d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	00030d40 	.word	0x00030d40

08005304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005324:	4313      	orrs	r3, r2
 8005326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005350:	f023 0303 	bic.w	r3, r3, #3
 8005354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0301 	and.w	r3, r3, #1
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <USB_CoreReset+0x64>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e01b      	b.n	80053ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	daf2      	bge.n	80053a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f043 0201 	orr.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <USB_CoreReset+0x64>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e006      	b.n	80053ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d0f0      	beq.n	80053ca <USB_CoreReset+0x36>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	00030d40 	.word	0x00030d40

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	; (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000014 	.word	0x20000014

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	; (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	; (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	; (800544c <__libc_init_array+0x44>)
 800541c:	f000 fc8e 	bl	8005d3c <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005f7c 	.word	0x08005f7c
 8005444:	08005f7c 	.word	0x08005f7c
 8005448:	08005f7c 	.word	0x08005f7c
 800544c:	08005f80 	.word	0x08005f80

08005450 <memset>:
 8005450:	4402      	add	r2, r0
 8005452:	4603      	mov	r3, r0
 8005454:	4293      	cmp	r3, r2
 8005456:	d100      	bne.n	800545a <memset+0xa>
 8005458:	4770      	bx	lr
 800545a:	f803 1b01 	strb.w	r1, [r3], #1
 800545e:	e7f9      	b.n	8005454 <memset+0x4>

08005460 <siprintf>:
 8005460:	b40e      	push	{r1, r2, r3}
 8005462:	b500      	push	{lr}
 8005464:	b09c      	sub	sp, #112	; 0x70
 8005466:	ab1d      	add	r3, sp, #116	; 0x74
 8005468:	9002      	str	r0, [sp, #8]
 800546a:	9006      	str	r0, [sp, #24]
 800546c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005470:	4809      	ldr	r0, [pc, #36]	; (8005498 <siprintf+0x38>)
 8005472:	9107      	str	r1, [sp, #28]
 8005474:	9104      	str	r1, [sp, #16]
 8005476:	4909      	ldr	r1, [pc, #36]	; (800549c <siprintf+0x3c>)
 8005478:	f853 2b04 	ldr.w	r2, [r3], #4
 800547c:	9105      	str	r1, [sp, #20]
 800547e:	6800      	ldr	r0, [r0, #0]
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	a902      	add	r1, sp, #8
 8005484:	f000 f868 	bl	8005558 <_svfiprintf_r>
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	b01c      	add	sp, #112	; 0x70
 8005490:	f85d eb04 	ldr.w	lr, [sp], #4
 8005494:	b003      	add	sp, #12
 8005496:	4770      	bx	lr
 8005498:	20000014 	.word	0x20000014
 800549c:	ffff0208 	.word	0xffff0208

080054a0 <__ssputs_r>:
 80054a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	688e      	ldr	r6, [r1, #8]
 80054a6:	429e      	cmp	r6, r3
 80054a8:	4682      	mov	sl, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	4690      	mov	r8, r2
 80054ae:	461f      	mov	r7, r3
 80054b0:	d838      	bhi.n	8005524 <__ssputs_r+0x84>
 80054b2:	898a      	ldrh	r2, [r1, #12]
 80054b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054b8:	d032      	beq.n	8005520 <__ssputs_r+0x80>
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	6909      	ldr	r1, [r1, #16]
 80054be:	eba5 0901 	sub.w	r9, r5, r1
 80054c2:	6965      	ldr	r5, [r4, #20]
 80054c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054cc:	3301      	adds	r3, #1
 80054ce:	444b      	add	r3, r9
 80054d0:	106d      	asrs	r5, r5, #1
 80054d2:	429d      	cmp	r5, r3
 80054d4:	bf38      	it	cc
 80054d6:	461d      	movcc	r5, r3
 80054d8:	0553      	lsls	r3, r2, #21
 80054da:	d531      	bpl.n	8005540 <__ssputs_r+0xa0>
 80054dc:	4629      	mov	r1, r5
 80054de:	f000 fb63 	bl	8005ba8 <_malloc_r>
 80054e2:	4606      	mov	r6, r0
 80054e4:	b950      	cbnz	r0, 80054fc <__ssputs_r+0x5c>
 80054e6:	230c      	movs	r3, #12
 80054e8:	f8ca 3000 	str.w	r3, [sl]
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f2:	81a3      	strh	r3, [r4, #12]
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fc:	6921      	ldr	r1, [r4, #16]
 80054fe:	464a      	mov	r2, r9
 8005500:	f000 fabe 	bl	8005a80 <memcpy>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	6126      	str	r6, [r4, #16]
 8005512:	6165      	str	r5, [r4, #20]
 8005514:	444e      	add	r6, r9
 8005516:	eba5 0509 	sub.w	r5, r5, r9
 800551a:	6026      	str	r6, [r4, #0]
 800551c:	60a5      	str	r5, [r4, #8]
 800551e:	463e      	mov	r6, r7
 8005520:	42be      	cmp	r6, r7
 8005522:	d900      	bls.n	8005526 <__ssputs_r+0x86>
 8005524:	463e      	mov	r6, r7
 8005526:	6820      	ldr	r0, [r4, #0]
 8005528:	4632      	mov	r2, r6
 800552a:	4641      	mov	r1, r8
 800552c:	f000 fab6 	bl	8005a9c <memmove>
 8005530:	68a3      	ldr	r3, [r4, #8]
 8005532:	1b9b      	subs	r3, r3, r6
 8005534:	60a3      	str	r3, [r4, #8]
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	4433      	add	r3, r6
 800553a:	6023      	str	r3, [r4, #0]
 800553c:	2000      	movs	r0, #0
 800553e:	e7db      	b.n	80054f8 <__ssputs_r+0x58>
 8005540:	462a      	mov	r2, r5
 8005542:	f000 fba5 	bl	8005c90 <_realloc_r>
 8005546:	4606      	mov	r6, r0
 8005548:	2800      	cmp	r0, #0
 800554a:	d1e1      	bne.n	8005510 <__ssputs_r+0x70>
 800554c:	6921      	ldr	r1, [r4, #16]
 800554e:	4650      	mov	r0, sl
 8005550:	f000 fabe 	bl	8005ad0 <_free_r>
 8005554:	e7c7      	b.n	80054e6 <__ssputs_r+0x46>
	...

08005558 <_svfiprintf_r>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	4698      	mov	r8, r3
 800555e:	898b      	ldrh	r3, [r1, #12]
 8005560:	061b      	lsls	r3, r3, #24
 8005562:	b09d      	sub	sp, #116	; 0x74
 8005564:	4607      	mov	r7, r0
 8005566:	460d      	mov	r5, r1
 8005568:	4614      	mov	r4, r2
 800556a:	d50e      	bpl.n	800558a <_svfiprintf_r+0x32>
 800556c:	690b      	ldr	r3, [r1, #16]
 800556e:	b963      	cbnz	r3, 800558a <_svfiprintf_r+0x32>
 8005570:	2140      	movs	r1, #64	; 0x40
 8005572:	f000 fb19 	bl	8005ba8 <_malloc_r>
 8005576:	6028      	str	r0, [r5, #0]
 8005578:	6128      	str	r0, [r5, #16]
 800557a:	b920      	cbnz	r0, 8005586 <_svfiprintf_r+0x2e>
 800557c:	230c      	movs	r3, #12
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005584:	e0d1      	b.n	800572a <_svfiprintf_r+0x1d2>
 8005586:	2340      	movs	r3, #64	; 0x40
 8005588:	616b      	str	r3, [r5, #20]
 800558a:	2300      	movs	r3, #0
 800558c:	9309      	str	r3, [sp, #36]	; 0x24
 800558e:	2320      	movs	r3, #32
 8005590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005594:	f8cd 800c 	str.w	r8, [sp, #12]
 8005598:	2330      	movs	r3, #48	; 0x30
 800559a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005744 <_svfiprintf_r+0x1ec>
 800559e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055a2:	f04f 0901 	mov.w	r9, #1
 80055a6:	4623      	mov	r3, r4
 80055a8:	469a      	mov	sl, r3
 80055aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ae:	b10a      	cbz	r2, 80055b4 <_svfiprintf_r+0x5c>
 80055b0:	2a25      	cmp	r2, #37	; 0x25
 80055b2:	d1f9      	bne.n	80055a8 <_svfiprintf_r+0x50>
 80055b4:	ebba 0b04 	subs.w	fp, sl, r4
 80055b8:	d00b      	beq.n	80055d2 <_svfiprintf_r+0x7a>
 80055ba:	465b      	mov	r3, fp
 80055bc:	4622      	mov	r2, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	4638      	mov	r0, r7
 80055c2:	f7ff ff6d 	bl	80054a0 <__ssputs_r>
 80055c6:	3001      	adds	r0, #1
 80055c8:	f000 80aa 	beq.w	8005720 <_svfiprintf_r+0x1c8>
 80055cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ce:	445a      	add	r2, fp
 80055d0:	9209      	str	r2, [sp, #36]	; 0x24
 80055d2:	f89a 3000 	ldrb.w	r3, [sl]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80a2 	beq.w	8005720 <_svfiprintf_r+0x1c8>
 80055dc:	2300      	movs	r3, #0
 80055de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e6:	f10a 0a01 	add.w	sl, sl, #1
 80055ea:	9304      	str	r3, [sp, #16]
 80055ec:	9307      	str	r3, [sp, #28]
 80055ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055f2:	931a      	str	r3, [sp, #104]	; 0x68
 80055f4:	4654      	mov	r4, sl
 80055f6:	2205      	movs	r2, #5
 80055f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fc:	4851      	ldr	r0, [pc, #324]	; (8005744 <_svfiprintf_r+0x1ec>)
 80055fe:	f7fa fe0f 	bl	8000220 <memchr>
 8005602:	9a04      	ldr	r2, [sp, #16]
 8005604:	b9d8      	cbnz	r0, 800563e <_svfiprintf_r+0xe6>
 8005606:	06d0      	lsls	r0, r2, #27
 8005608:	bf44      	itt	mi
 800560a:	2320      	movmi	r3, #32
 800560c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005610:	0711      	lsls	r1, r2, #28
 8005612:	bf44      	itt	mi
 8005614:	232b      	movmi	r3, #43	; 0x2b
 8005616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800561a:	f89a 3000 	ldrb.w	r3, [sl]
 800561e:	2b2a      	cmp	r3, #42	; 0x2a
 8005620:	d015      	beq.n	800564e <_svfiprintf_r+0xf6>
 8005622:	9a07      	ldr	r2, [sp, #28]
 8005624:	4654      	mov	r4, sl
 8005626:	2000      	movs	r0, #0
 8005628:	f04f 0c0a 	mov.w	ip, #10
 800562c:	4621      	mov	r1, r4
 800562e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005632:	3b30      	subs	r3, #48	; 0x30
 8005634:	2b09      	cmp	r3, #9
 8005636:	d94e      	bls.n	80056d6 <_svfiprintf_r+0x17e>
 8005638:	b1b0      	cbz	r0, 8005668 <_svfiprintf_r+0x110>
 800563a:	9207      	str	r2, [sp, #28]
 800563c:	e014      	b.n	8005668 <_svfiprintf_r+0x110>
 800563e:	eba0 0308 	sub.w	r3, r0, r8
 8005642:	fa09 f303 	lsl.w	r3, r9, r3
 8005646:	4313      	orrs	r3, r2
 8005648:	9304      	str	r3, [sp, #16]
 800564a:	46a2      	mov	sl, r4
 800564c:	e7d2      	b.n	80055f4 <_svfiprintf_r+0x9c>
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	1d19      	adds	r1, r3, #4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	9103      	str	r1, [sp, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfbb      	ittet	lt
 800565a:	425b      	neglt	r3, r3
 800565c:	f042 0202 	orrlt.w	r2, r2, #2
 8005660:	9307      	strge	r3, [sp, #28]
 8005662:	9307      	strlt	r3, [sp, #28]
 8005664:	bfb8      	it	lt
 8005666:	9204      	strlt	r2, [sp, #16]
 8005668:	7823      	ldrb	r3, [r4, #0]
 800566a:	2b2e      	cmp	r3, #46	; 0x2e
 800566c:	d10c      	bne.n	8005688 <_svfiprintf_r+0x130>
 800566e:	7863      	ldrb	r3, [r4, #1]
 8005670:	2b2a      	cmp	r3, #42	; 0x2a
 8005672:	d135      	bne.n	80056e0 <_svfiprintf_r+0x188>
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	1d1a      	adds	r2, r3, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	9203      	str	r2, [sp, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	bfb8      	it	lt
 8005680:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005684:	3402      	adds	r4, #2
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005754 <_svfiprintf_r+0x1fc>
 800568c:	7821      	ldrb	r1, [r4, #0]
 800568e:	2203      	movs	r2, #3
 8005690:	4650      	mov	r0, sl
 8005692:	f7fa fdc5 	bl	8000220 <memchr>
 8005696:	b140      	cbz	r0, 80056aa <_svfiprintf_r+0x152>
 8005698:	2340      	movs	r3, #64	; 0x40
 800569a:	eba0 000a 	sub.w	r0, r0, sl
 800569e:	fa03 f000 	lsl.w	r0, r3, r0
 80056a2:	9b04      	ldr	r3, [sp, #16]
 80056a4:	4303      	orrs	r3, r0
 80056a6:	3401      	adds	r4, #1
 80056a8:	9304      	str	r3, [sp, #16]
 80056aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ae:	4826      	ldr	r0, [pc, #152]	; (8005748 <_svfiprintf_r+0x1f0>)
 80056b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056b4:	2206      	movs	r2, #6
 80056b6:	f7fa fdb3 	bl	8000220 <memchr>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d038      	beq.n	8005730 <_svfiprintf_r+0x1d8>
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <_svfiprintf_r+0x1f4>)
 80056c0:	bb1b      	cbnz	r3, 800570a <_svfiprintf_r+0x1b2>
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	3307      	adds	r3, #7
 80056c6:	f023 0307 	bic.w	r3, r3, #7
 80056ca:	3308      	adds	r3, #8
 80056cc:	9303      	str	r3, [sp, #12]
 80056ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d0:	4433      	add	r3, r6
 80056d2:	9309      	str	r3, [sp, #36]	; 0x24
 80056d4:	e767      	b.n	80055a6 <_svfiprintf_r+0x4e>
 80056d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80056da:	460c      	mov	r4, r1
 80056dc:	2001      	movs	r0, #1
 80056de:	e7a5      	b.n	800562c <_svfiprintf_r+0xd4>
 80056e0:	2300      	movs	r3, #0
 80056e2:	3401      	adds	r4, #1
 80056e4:	9305      	str	r3, [sp, #20]
 80056e6:	4619      	mov	r1, r3
 80056e8:	f04f 0c0a 	mov.w	ip, #10
 80056ec:	4620      	mov	r0, r4
 80056ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f2:	3a30      	subs	r2, #48	; 0x30
 80056f4:	2a09      	cmp	r2, #9
 80056f6:	d903      	bls.n	8005700 <_svfiprintf_r+0x1a8>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0c5      	beq.n	8005688 <_svfiprintf_r+0x130>
 80056fc:	9105      	str	r1, [sp, #20]
 80056fe:	e7c3      	b.n	8005688 <_svfiprintf_r+0x130>
 8005700:	fb0c 2101 	mla	r1, ip, r1, r2
 8005704:	4604      	mov	r4, r0
 8005706:	2301      	movs	r3, #1
 8005708:	e7f0      	b.n	80056ec <_svfiprintf_r+0x194>
 800570a:	ab03      	add	r3, sp, #12
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	462a      	mov	r2, r5
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <_svfiprintf_r+0x1f8>)
 8005712:	a904      	add	r1, sp, #16
 8005714:	4638      	mov	r0, r7
 8005716:	f3af 8000 	nop.w
 800571a:	1c42      	adds	r2, r0, #1
 800571c:	4606      	mov	r6, r0
 800571e:	d1d6      	bne.n	80056ce <_svfiprintf_r+0x176>
 8005720:	89ab      	ldrh	r3, [r5, #12]
 8005722:	065b      	lsls	r3, r3, #25
 8005724:	f53f af2c 	bmi.w	8005580 <_svfiprintf_r+0x28>
 8005728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800572a:	b01d      	add	sp, #116	; 0x74
 800572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005730:	ab03      	add	r3, sp, #12
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	462a      	mov	r2, r5
 8005736:	4b06      	ldr	r3, [pc, #24]	; (8005750 <_svfiprintf_r+0x1f8>)
 8005738:	a904      	add	r1, sp, #16
 800573a:	4638      	mov	r0, r7
 800573c:	f000 f87a 	bl	8005834 <_printf_i>
 8005740:	e7eb      	b.n	800571a <_svfiprintf_r+0x1c2>
 8005742:	bf00      	nop
 8005744:	08005f40 	.word	0x08005f40
 8005748:	08005f4a 	.word	0x08005f4a
 800574c:	00000000 	.word	0x00000000
 8005750:	080054a1 	.word	0x080054a1
 8005754:	08005f46 	.word	0x08005f46

08005758 <_printf_common>:
 8005758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575c:	4616      	mov	r6, r2
 800575e:	4699      	mov	r9, r3
 8005760:	688a      	ldr	r2, [r1, #8]
 8005762:	690b      	ldr	r3, [r1, #16]
 8005764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005768:	4293      	cmp	r3, r2
 800576a:	bfb8      	it	lt
 800576c:	4613      	movlt	r3, r2
 800576e:	6033      	str	r3, [r6, #0]
 8005770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005774:	4607      	mov	r7, r0
 8005776:	460c      	mov	r4, r1
 8005778:	b10a      	cbz	r2, 800577e <_printf_common+0x26>
 800577a:	3301      	adds	r3, #1
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	0699      	lsls	r1, r3, #26
 8005782:	bf42      	ittt	mi
 8005784:	6833      	ldrmi	r3, [r6, #0]
 8005786:	3302      	addmi	r3, #2
 8005788:	6033      	strmi	r3, [r6, #0]
 800578a:	6825      	ldr	r5, [r4, #0]
 800578c:	f015 0506 	ands.w	r5, r5, #6
 8005790:	d106      	bne.n	80057a0 <_printf_common+0x48>
 8005792:	f104 0a19 	add.w	sl, r4, #25
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	6832      	ldr	r2, [r6, #0]
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	42ab      	cmp	r3, r5
 800579e:	dc26      	bgt.n	80057ee <_printf_common+0x96>
 80057a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a4:	1e13      	subs	r3, r2, #0
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	bf18      	it	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	0692      	lsls	r2, r2, #26
 80057ae:	d42b      	bmi.n	8005808 <_printf_common+0xb0>
 80057b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b4:	4649      	mov	r1, r9
 80057b6:	4638      	mov	r0, r7
 80057b8:	47c0      	blx	r8
 80057ba:	3001      	adds	r0, #1
 80057bc:	d01e      	beq.n	80057fc <_printf_common+0xa4>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	68e5      	ldr	r5, [r4, #12]
 80057c2:	6832      	ldr	r2, [r6, #0]
 80057c4:	f003 0306 	and.w	r3, r3, #6
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	bf08      	it	eq
 80057cc:	1aad      	subeq	r5, r5, r2
 80057ce:	68a3      	ldr	r3, [r4, #8]
 80057d0:	6922      	ldr	r2, [r4, #16]
 80057d2:	bf0c      	ite	eq
 80057d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d8:	2500      	movne	r5, #0
 80057da:	4293      	cmp	r3, r2
 80057dc:	bfc4      	itt	gt
 80057de:	1a9b      	subgt	r3, r3, r2
 80057e0:	18ed      	addgt	r5, r5, r3
 80057e2:	2600      	movs	r6, #0
 80057e4:	341a      	adds	r4, #26
 80057e6:	42b5      	cmp	r5, r6
 80057e8:	d11a      	bne.n	8005820 <_printf_common+0xc8>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e008      	b.n	8005800 <_printf_common+0xa8>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4652      	mov	r2, sl
 80057f2:	4649      	mov	r1, r9
 80057f4:	4638      	mov	r0, r7
 80057f6:	47c0      	blx	r8
 80057f8:	3001      	adds	r0, #1
 80057fa:	d103      	bne.n	8005804 <_printf_common+0xac>
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005804:	3501      	adds	r5, #1
 8005806:	e7c6      	b.n	8005796 <_printf_common+0x3e>
 8005808:	18e1      	adds	r1, r4, r3
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	2030      	movs	r0, #48	; 0x30
 800580e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005812:	4422      	add	r2, r4
 8005814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800581c:	3302      	adds	r3, #2
 800581e:	e7c7      	b.n	80057b0 <_printf_common+0x58>
 8005820:	2301      	movs	r3, #1
 8005822:	4622      	mov	r2, r4
 8005824:	4649      	mov	r1, r9
 8005826:	4638      	mov	r0, r7
 8005828:	47c0      	blx	r8
 800582a:	3001      	adds	r0, #1
 800582c:	d0e6      	beq.n	80057fc <_printf_common+0xa4>
 800582e:	3601      	adds	r6, #1
 8005830:	e7d9      	b.n	80057e6 <_printf_common+0x8e>
	...

08005834 <_printf_i>:
 8005834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	7e0f      	ldrb	r7, [r1, #24]
 800583a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800583c:	2f78      	cmp	r7, #120	; 0x78
 800583e:	4691      	mov	r9, r2
 8005840:	4680      	mov	r8, r0
 8005842:	460c      	mov	r4, r1
 8005844:	469a      	mov	sl, r3
 8005846:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800584a:	d807      	bhi.n	800585c <_printf_i+0x28>
 800584c:	2f62      	cmp	r7, #98	; 0x62
 800584e:	d80a      	bhi.n	8005866 <_printf_i+0x32>
 8005850:	2f00      	cmp	r7, #0
 8005852:	f000 80d8 	beq.w	8005a06 <_printf_i+0x1d2>
 8005856:	2f58      	cmp	r7, #88	; 0x58
 8005858:	f000 80a3 	beq.w	80059a2 <_printf_i+0x16e>
 800585c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005864:	e03a      	b.n	80058dc <_printf_i+0xa8>
 8005866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800586a:	2b15      	cmp	r3, #21
 800586c:	d8f6      	bhi.n	800585c <_printf_i+0x28>
 800586e:	a101      	add	r1, pc, #4	; (adr r1, 8005874 <_printf_i+0x40>)
 8005870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005874:	080058cd 	.word	0x080058cd
 8005878:	080058e1 	.word	0x080058e1
 800587c:	0800585d 	.word	0x0800585d
 8005880:	0800585d 	.word	0x0800585d
 8005884:	0800585d 	.word	0x0800585d
 8005888:	0800585d 	.word	0x0800585d
 800588c:	080058e1 	.word	0x080058e1
 8005890:	0800585d 	.word	0x0800585d
 8005894:	0800585d 	.word	0x0800585d
 8005898:	0800585d 	.word	0x0800585d
 800589c:	0800585d 	.word	0x0800585d
 80058a0:	080059ed 	.word	0x080059ed
 80058a4:	08005911 	.word	0x08005911
 80058a8:	080059cf 	.word	0x080059cf
 80058ac:	0800585d 	.word	0x0800585d
 80058b0:	0800585d 	.word	0x0800585d
 80058b4:	08005a0f 	.word	0x08005a0f
 80058b8:	0800585d 	.word	0x0800585d
 80058bc:	08005911 	.word	0x08005911
 80058c0:	0800585d 	.word	0x0800585d
 80058c4:	0800585d 	.word	0x0800585d
 80058c8:	080059d7 	.word	0x080059d7
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	602a      	str	r2, [r5, #0]
 80058d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058dc:	2301      	movs	r3, #1
 80058de:	e0a3      	b.n	8005a28 <_printf_i+0x1f4>
 80058e0:	6820      	ldr	r0, [r4, #0]
 80058e2:	6829      	ldr	r1, [r5, #0]
 80058e4:	0606      	lsls	r6, r0, #24
 80058e6:	f101 0304 	add.w	r3, r1, #4
 80058ea:	d50a      	bpl.n	8005902 <_printf_i+0xce>
 80058ec:	680e      	ldr	r6, [r1, #0]
 80058ee:	602b      	str	r3, [r5, #0]
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	da03      	bge.n	80058fc <_printf_i+0xc8>
 80058f4:	232d      	movs	r3, #45	; 0x2d
 80058f6:	4276      	negs	r6, r6
 80058f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fc:	485e      	ldr	r0, [pc, #376]	; (8005a78 <_printf_i+0x244>)
 80058fe:	230a      	movs	r3, #10
 8005900:	e019      	b.n	8005936 <_printf_i+0x102>
 8005902:	680e      	ldr	r6, [r1, #0]
 8005904:	602b      	str	r3, [r5, #0]
 8005906:	f010 0f40 	tst.w	r0, #64	; 0x40
 800590a:	bf18      	it	ne
 800590c:	b236      	sxthne	r6, r6
 800590e:	e7ef      	b.n	80058f0 <_printf_i+0xbc>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	1d19      	adds	r1, r3, #4
 8005916:	6029      	str	r1, [r5, #0]
 8005918:	0601      	lsls	r1, r0, #24
 800591a:	d501      	bpl.n	8005920 <_printf_i+0xec>
 800591c:	681e      	ldr	r6, [r3, #0]
 800591e:	e002      	b.n	8005926 <_printf_i+0xf2>
 8005920:	0646      	lsls	r6, r0, #25
 8005922:	d5fb      	bpl.n	800591c <_printf_i+0xe8>
 8005924:	881e      	ldrh	r6, [r3, #0]
 8005926:	4854      	ldr	r0, [pc, #336]	; (8005a78 <_printf_i+0x244>)
 8005928:	2f6f      	cmp	r7, #111	; 0x6f
 800592a:	bf0c      	ite	eq
 800592c:	2308      	moveq	r3, #8
 800592e:	230a      	movne	r3, #10
 8005930:	2100      	movs	r1, #0
 8005932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005936:	6865      	ldr	r5, [r4, #4]
 8005938:	60a5      	str	r5, [r4, #8]
 800593a:	2d00      	cmp	r5, #0
 800593c:	bfa2      	ittt	ge
 800593e:	6821      	ldrge	r1, [r4, #0]
 8005940:	f021 0104 	bicge.w	r1, r1, #4
 8005944:	6021      	strge	r1, [r4, #0]
 8005946:	b90e      	cbnz	r6, 800594c <_printf_i+0x118>
 8005948:	2d00      	cmp	r5, #0
 800594a:	d04d      	beq.n	80059e8 <_printf_i+0x1b4>
 800594c:	4615      	mov	r5, r2
 800594e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005952:	fb03 6711 	mls	r7, r3, r1, r6
 8005956:	5dc7      	ldrb	r7, [r0, r7]
 8005958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800595c:	4637      	mov	r7, r6
 800595e:	42bb      	cmp	r3, r7
 8005960:	460e      	mov	r6, r1
 8005962:	d9f4      	bls.n	800594e <_printf_i+0x11a>
 8005964:	2b08      	cmp	r3, #8
 8005966:	d10b      	bne.n	8005980 <_printf_i+0x14c>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07de      	lsls	r6, r3, #31
 800596c:	d508      	bpl.n	8005980 <_printf_i+0x14c>
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	6861      	ldr	r1, [r4, #4]
 8005972:	4299      	cmp	r1, r3
 8005974:	bfde      	ittt	le
 8005976:	2330      	movle	r3, #48	; 0x30
 8005978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800597c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005980:	1b52      	subs	r2, r2, r5
 8005982:	6122      	str	r2, [r4, #16]
 8005984:	f8cd a000 	str.w	sl, [sp]
 8005988:	464b      	mov	r3, r9
 800598a:	aa03      	add	r2, sp, #12
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f7ff fee2 	bl	8005758 <_printf_common>
 8005994:	3001      	adds	r0, #1
 8005996:	d14c      	bne.n	8005a32 <_printf_i+0x1fe>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800599c:	b004      	add	sp, #16
 800599e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a2:	4835      	ldr	r0, [pc, #212]	; (8005a78 <_printf_i+0x244>)
 80059a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059a8:	6829      	ldr	r1, [r5, #0]
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80059b0:	6029      	str	r1, [r5, #0]
 80059b2:	061d      	lsls	r5, r3, #24
 80059b4:	d514      	bpl.n	80059e0 <_printf_i+0x1ac>
 80059b6:	07df      	lsls	r7, r3, #31
 80059b8:	bf44      	itt	mi
 80059ba:	f043 0320 	orrmi.w	r3, r3, #32
 80059be:	6023      	strmi	r3, [r4, #0]
 80059c0:	b91e      	cbnz	r6, 80059ca <_printf_i+0x196>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	f023 0320 	bic.w	r3, r3, #32
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	2310      	movs	r3, #16
 80059cc:	e7b0      	b.n	8005930 <_printf_i+0xfc>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	f043 0320 	orr.w	r3, r3, #32
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	2378      	movs	r3, #120	; 0x78
 80059d8:	4828      	ldr	r0, [pc, #160]	; (8005a7c <_printf_i+0x248>)
 80059da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059de:	e7e3      	b.n	80059a8 <_printf_i+0x174>
 80059e0:	0659      	lsls	r1, r3, #25
 80059e2:	bf48      	it	mi
 80059e4:	b2b6      	uxthmi	r6, r6
 80059e6:	e7e6      	b.n	80059b6 <_printf_i+0x182>
 80059e8:	4615      	mov	r5, r2
 80059ea:	e7bb      	b.n	8005964 <_printf_i+0x130>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	6826      	ldr	r6, [r4, #0]
 80059f0:	6961      	ldr	r1, [r4, #20]
 80059f2:	1d18      	adds	r0, r3, #4
 80059f4:	6028      	str	r0, [r5, #0]
 80059f6:	0635      	lsls	r5, r6, #24
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	d501      	bpl.n	8005a00 <_printf_i+0x1cc>
 80059fc:	6019      	str	r1, [r3, #0]
 80059fe:	e002      	b.n	8005a06 <_printf_i+0x1d2>
 8005a00:	0670      	lsls	r0, r6, #25
 8005a02:	d5fb      	bpl.n	80059fc <_printf_i+0x1c8>
 8005a04:	8019      	strh	r1, [r3, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	4615      	mov	r5, r2
 8005a0c:	e7ba      	b.n	8005984 <_printf_i+0x150>
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	1d1a      	adds	r2, r3, #4
 8005a12:	602a      	str	r2, [r5, #0]
 8005a14:	681d      	ldr	r5, [r3, #0]
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f7fa fc00 	bl	8000220 <memchr>
 8005a20:	b108      	cbz	r0, 8005a26 <_printf_i+0x1f2>
 8005a22:	1b40      	subs	r0, r0, r5
 8005a24:	6060      	str	r0, [r4, #4]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a30:	e7a8      	b.n	8005984 <_printf_i+0x150>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	462a      	mov	r2, r5
 8005a36:	4649      	mov	r1, r9
 8005a38:	4640      	mov	r0, r8
 8005a3a:	47d0      	blx	sl
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d0ab      	beq.n	8005998 <_printf_i+0x164>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	079b      	lsls	r3, r3, #30
 8005a44:	d413      	bmi.n	8005a6e <_printf_i+0x23a>
 8005a46:	68e0      	ldr	r0, [r4, #12]
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	4298      	cmp	r0, r3
 8005a4c:	bfb8      	it	lt
 8005a4e:	4618      	movlt	r0, r3
 8005a50:	e7a4      	b.n	800599c <_printf_i+0x168>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4632      	mov	r2, r6
 8005a56:	4649      	mov	r1, r9
 8005a58:	4640      	mov	r0, r8
 8005a5a:	47d0      	blx	sl
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d09b      	beq.n	8005998 <_printf_i+0x164>
 8005a60:	3501      	adds	r5, #1
 8005a62:	68e3      	ldr	r3, [r4, #12]
 8005a64:	9903      	ldr	r1, [sp, #12]
 8005a66:	1a5b      	subs	r3, r3, r1
 8005a68:	42ab      	cmp	r3, r5
 8005a6a:	dcf2      	bgt.n	8005a52 <_printf_i+0x21e>
 8005a6c:	e7eb      	b.n	8005a46 <_printf_i+0x212>
 8005a6e:	2500      	movs	r5, #0
 8005a70:	f104 0619 	add.w	r6, r4, #25
 8005a74:	e7f5      	b.n	8005a62 <_printf_i+0x22e>
 8005a76:	bf00      	nop
 8005a78:	08005f51 	.word	0x08005f51
 8005a7c:	08005f62 	.word	0x08005f62

08005a80 <memcpy>:
 8005a80:	440a      	add	r2, r1
 8005a82:	4291      	cmp	r1, r2
 8005a84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a88:	d100      	bne.n	8005a8c <memcpy+0xc>
 8005a8a:	4770      	bx	lr
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a96:	4291      	cmp	r1, r2
 8005a98:	d1f9      	bne.n	8005a8e <memcpy+0xe>
 8005a9a:	bd10      	pop	{r4, pc}

08005a9c <memmove>:
 8005a9c:	4288      	cmp	r0, r1
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	eb01 0402 	add.w	r4, r1, r2
 8005aa4:	d902      	bls.n	8005aac <memmove+0x10>
 8005aa6:	4284      	cmp	r4, r0
 8005aa8:	4623      	mov	r3, r4
 8005aaa:	d807      	bhi.n	8005abc <memmove+0x20>
 8005aac:	1e43      	subs	r3, r0, #1
 8005aae:	42a1      	cmp	r1, r4
 8005ab0:	d008      	beq.n	8005ac4 <memmove+0x28>
 8005ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aba:	e7f8      	b.n	8005aae <memmove+0x12>
 8005abc:	4402      	add	r2, r0
 8005abe:	4601      	mov	r1, r0
 8005ac0:	428a      	cmp	r2, r1
 8005ac2:	d100      	bne.n	8005ac6 <memmove+0x2a>
 8005ac4:	bd10      	pop	{r4, pc}
 8005ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ace:	e7f7      	b.n	8005ac0 <memmove+0x24>

08005ad0 <_free_r>:
 8005ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ad2:	2900      	cmp	r1, #0
 8005ad4:	d044      	beq.n	8005b60 <_free_r+0x90>
 8005ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ada:	9001      	str	r0, [sp, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f1a1 0404 	sub.w	r4, r1, #4
 8005ae2:	bfb8      	it	lt
 8005ae4:	18e4      	addlt	r4, r4, r3
 8005ae6:	f000 f913 	bl	8005d10 <__malloc_lock>
 8005aea:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <_free_r+0x94>)
 8005aec:	9801      	ldr	r0, [sp, #4]
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	b933      	cbnz	r3, 8005b00 <_free_r+0x30>
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	6014      	str	r4, [r2, #0]
 8005af6:	b003      	add	sp, #12
 8005af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005afc:	f000 b90e 	b.w	8005d1c <__malloc_unlock>
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d908      	bls.n	8005b16 <_free_r+0x46>
 8005b04:	6825      	ldr	r5, [r4, #0]
 8005b06:	1961      	adds	r1, r4, r5
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	bf01      	itttt	eq
 8005b0c:	6819      	ldreq	r1, [r3, #0]
 8005b0e:	685b      	ldreq	r3, [r3, #4]
 8005b10:	1949      	addeq	r1, r1, r5
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	e7ed      	b.n	8005af2 <_free_r+0x22>
 8005b16:	461a      	mov	r2, r3
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	b10b      	cbz	r3, 8005b20 <_free_r+0x50>
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d9fa      	bls.n	8005b16 <_free_r+0x46>
 8005b20:	6811      	ldr	r1, [r2, #0]
 8005b22:	1855      	adds	r5, r2, r1
 8005b24:	42a5      	cmp	r5, r4
 8005b26:	d10b      	bne.n	8005b40 <_free_r+0x70>
 8005b28:	6824      	ldr	r4, [r4, #0]
 8005b2a:	4421      	add	r1, r4
 8005b2c:	1854      	adds	r4, r2, r1
 8005b2e:	42a3      	cmp	r3, r4
 8005b30:	6011      	str	r1, [r2, #0]
 8005b32:	d1e0      	bne.n	8005af6 <_free_r+0x26>
 8005b34:	681c      	ldr	r4, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	6053      	str	r3, [r2, #4]
 8005b3a:	4421      	add	r1, r4
 8005b3c:	6011      	str	r1, [r2, #0]
 8005b3e:	e7da      	b.n	8005af6 <_free_r+0x26>
 8005b40:	d902      	bls.n	8005b48 <_free_r+0x78>
 8005b42:	230c      	movs	r3, #12
 8005b44:	6003      	str	r3, [r0, #0]
 8005b46:	e7d6      	b.n	8005af6 <_free_r+0x26>
 8005b48:	6825      	ldr	r5, [r4, #0]
 8005b4a:	1961      	adds	r1, r4, r5
 8005b4c:	428b      	cmp	r3, r1
 8005b4e:	bf04      	itt	eq
 8005b50:	6819      	ldreq	r1, [r3, #0]
 8005b52:	685b      	ldreq	r3, [r3, #4]
 8005b54:	6063      	str	r3, [r4, #4]
 8005b56:	bf04      	itt	eq
 8005b58:	1949      	addeq	r1, r1, r5
 8005b5a:	6021      	streq	r1, [r4, #0]
 8005b5c:	6054      	str	r4, [r2, #4]
 8005b5e:	e7ca      	b.n	8005af6 <_free_r+0x26>
 8005b60:	b003      	add	sp, #12
 8005b62:	bd30      	pop	{r4, r5, pc}
 8005b64:	200008f8 	.word	0x200008f8

08005b68 <sbrk_aligned>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	4e0e      	ldr	r6, [pc, #56]	; (8005ba4 <sbrk_aligned+0x3c>)
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	6831      	ldr	r1, [r6, #0]
 8005b70:	4605      	mov	r5, r0
 8005b72:	b911      	cbnz	r1, 8005b7a <sbrk_aligned+0x12>
 8005b74:	f000 f8bc 	bl	8005cf0 <_sbrk_r>
 8005b78:	6030      	str	r0, [r6, #0]
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 f8b7 	bl	8005cf0 <_sbrk_r>
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	d00a      	beq.n	8005b9c <sbrk_aligned+0x34>
 8005b86:	1cc4      	adds	r4, r0, #3
 8005b88:	f024 0403 	bic.w	r4, r4, #3
 8005b8c:	42a0      	cmp	r0, r4
 8005b8e:	d007      	beq.n	8005ba0 <sbrk_aligned+0x38>
 8005b90:	1a21      	subs	r1, r4, r0
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 f8ac 	bl	8005cf0 <_sbrk_r>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d101      	bne.n	8005ba0 <sbrk_aligned+0x38>
 8005b9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	200008fc 	.word	0x200008fc

08005ba8 <_malloc_r>:
 8005ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bac:	1ccd      	adds	r5, r1, #3
 8005bae:	f025 0503 	bic.w	r5, r5, #3
 8005bb2:	3508      	adds	r5, #8
 8005bb4:	2d0c      	cmp	r5, #12
 8005bb6:	bf38      	it	cc
 8005bb8:	250c      	movcc	r5, #12
 8005bba:	2d00      	cmp	r5, #0
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	db01      	blt.n	8005bc4 <_malloc_r+0x1c>
 8005bc0:	42a9      	cmp	r1, r5
 8005bc2:	d905      	bls.n	8005bd0 <_malloc_r+0x28>
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	2600      	movs	r6, #0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd0:	4e2e      	ldr	r6, [pc, #184]	; (8005c8c <_malloc_r+0xe4>)
 8005bd2:	f000 f89d 	bl	8005d10 <__malloc_lock>
 8005bd6:	6833      	ldr	r3, [r6, #0]
 8005bd8:	461c      	mov	r4, r3
 8005bda:	bb34      	cbnz	r4, 8005c2a <_malloc_r+0x82>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4638      	mov	r0, r7
 8005be0:	f7ff ffc2 	bl	8005b68 <sbrk_aligned>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	4604      	mov	r4, r0
 8005be8:	d14d      	bne.n	8005c86 <_malloc_r+0xde>
 8005bea:	6834      	ldr	r4, [r6, #0]
 8005bec:	4626      	mov	r6, r4
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d140      	bne.n	8005c74 <_malloc_r+0xcc>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	eb04 0803 	add.w	r8, r4, r3
 8005bfc:	f000 f878 	bl	8005cf0 <_sbrk_r>
 8005c00:	4580      	cmp	r8, r0
 8005c02:	d13a      	bne.n	8005c7a <_malloc_r+0xd2>
 8005c04:	6821      	ldr	r1, [r4, #0]
 8005c06:	3503      	adds	r5, #3
 8005c08:	1a6d      	subs	r5, r5, r1
 8005c0a:	f025 0503 	bic.w	r5, r5, #3
 8005c0e:	3508      	adds	r5, #8
 8005c10:	2d0c      	cmp	r5, #12
 8005c12:	bf38      	it	cc
 8005c14:	250c      	movcc	r5, #12
 8005c16:	4629      	mov	r1, r5
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f7ff ffa5 	bl	8005b68 <sbrk_aligned>
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d02b      	beq.n	8005c7a <_malloc_r+0xd2>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	442b      	add	r3, r5
 8005c26:	6023      	str	r3, [r4, #0]
 8005c28:	e00e      	b.n	8005c48 <_malloc_r+0xa0>
 8005c2a:	6822      	ldr	r2, [r4, #0]
 8005c2c:	1b52      	subs	r2, r2, r5
 8005c2e:	d41e      	bmi.n	8005c6e <_malloc_r+0xc6>
 8005c30:	2a0b      	cmp	r2, #11
 8005c32:	d916      	bls.n	8005c62 <_malloc_r+0xba>
 8005c34:	1961      	adds	r1, r4, r5
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	6025      	str	r5, [r4, #0]
 8005c3a:	bf18      	it	ne
 8005c3c:	6059      	strne	r1, [r3, #4]
 8005c3e:	6863      	ldr	r3, [r4, #4]
 8005c40:	bf08      	it	eq
 8005c42:	6031      	streq	r1, [r6, #0]
 8005c44:	5162      	str	r2, [r4, r5]
 8005c46:	604b      	str	r3, [r1, #4]
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f104 060b 	add.w	r6, r4, #11
 8005c4e:	f000 f865 	bl	8005d1c <__malloc_unlock>
 8005c52:	f026 0607 	bic.w	r6, r6, #7
 8005c56:	1d23      	adds	r3, r4, #4
 8005c58:	1af2      	subs	r2, r6, r3
 8005c5a:	d0b6      	beq.n	8005bca <_malloc_r+0x22>
 8005c5c:	1b9b      	subs	r3, r3, r6
 8005c5e:	50a3      	str	r3, [r4, r2]
 8005c60:	e7b3      	b.n	8005bca <_malloc_r+0x22>
 8005c62:	6862      	ldr	r2, [r4, #4]
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	bf0c      	ite	eq
 8005c68:	6032      	streq	r2, [r6, #0]
 8005c6a:	605a      	strne	r2, [r3, #4]
 8005c6c:	e7ec      	b.n	8005c48 <_malloc_r+0xa0>
 8005c6e:	4623      	mov	r3, r4
 8005c70:	6864      	ldr	r4, [r4, #4]
 8005c72:	e7b2      	b.n	8005bda <_malloc_r+0x32>
 8005c74:	4634      	mov	r4, r6
 8005c76:	6876      	ldr	r6, [r6, #4]
 8005c78:	e7b9      	b.n	8005bee <_malloc_r+0x46>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4638      	mov	r0, r7
 8005c80:	f000 f84c 	bl	8005d1c <__malloc_unlock>
 8005c84:	e7a1      	b.n	8005bca <_malloc_r+0x22>
 8005c86:	6025      	str	r5, [r4, #0]
 8005c88:	e7de      	b.n	8005c48 <_malloc_r+0xa0>
 8005c8a:	bf00      	nop
 8005c8c:	200008f8 	.word	0x200008f8

08005c90 <_realloc_r>:
 8005c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	4680      	mov	r8, r0
 8005c96:	4614      	mov	r4, r2
 8005c98:	460e      	mov	r6, r1
 8005c9a:	b921      	cbnz	r1, 8005ca6 <_realloc_r+0x16>
 8005c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	f7ff bf81 	b.w	8005ba8 <_malloc_r>
 8005ca6:	b92a      	cbnz	r2, 8005cb4 <_realloc_r+0x24>
 8005ca8:	f7ff ff12 	bl	8005ad0 <_free_r>
 8005cac:	4625      	mov	r5, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb4:	f000 f838 	bl	8005d28 <_malloc_usable_size_r>
 8005cb8:	4284      	cmp	r4, r0
 8005cba:	4607      	mov	r7, r0
 8005cbc:	d802      	bhi.n	8005cc4 <_realloc_r+0x34>
 8005cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cc2:	d812      	bhi.n	8005cea <_realloc_r+0x5a>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f7ff ff6e 	bl	8005ba8 <_malloc_r>
 8005ccc:	4605      	mov	r5, r0
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d0ed      	beq.n	8005cae <_realloc_r+0x1e>
 8005cd2:	42bc      	cmp	r4, r7
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	bf28      	it	cs
 8005cda:	463a      	movcs	r2, r7
 8005cdc:	f7ff fed0 	bl	8005a80 <memcpy>
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f7ff fef4 	bl	8005ad0 <_free_r>
 8005ce8:	e7e1      	b.n	8005cae <_realloc_r+0x1e>
 8005cea:	4635      	mov	r5, r6
 8005cec:	e7df      	b.n	8005cae <_realloc_r+0x1e>
	...

08005cf0 <_sbrk_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d06      	ldr	r5, [pc, #24]	; (8005d0c <_sbrk_r+0x1c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	f7fb fe66 	bl	80019cc <_sbrk>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_sbrk_r+0x1a>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_sbrk_r+0x1a>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	20000900 	.word	0x20000900

08005d10 <__malloc_lock>:
 8005d10:	4801      	ldr	r0, [pc, #4]	; (8005d18 <__malloc_lock+0x8>)
 8005d12:	f000 b811 	b.w	8005d38 <__retarget_lock_acquire_recursive>
 8005d16:	bf00      	nop
 8005d18:	20000904 	.word	0x20000904

08005d1c <__malloc_unlock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__malloc_unlock+0x8>)
 8005d1e:	f000 b80c 	b.w	8005d3a <__retarget_lock_release_recursive>
 8005d22:	bf00      	nop
 8005d24:	20000904 	.word	0x20000904

08005d28 <_malloc_usable_size_r>:
 8005d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2c:	1f18      	subs	r0, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bfbc      	itt	lt
 8005d32:	580b      	ldrlt	r3, [r1, r0]
 8005d34:	18c0      	addlt	r0, r0, r3
 8005d36:	4770      	bx	lr

08005d38 <__retarget_lock_acquire_recursive>:
 8005d38:	4770      	bx	lr

08005d3a <__retarget_lock_release_recursive>:
 8005d3a:	4770      	bx	lr

08005d3c <_init>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr

08005d48 <_fini>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr
